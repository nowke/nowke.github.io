{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Write a procedure fringe that takes as argument a tree (represented as a list) \n; and returns a list whose elements are all the leaves of the tree arranged in \n; left-to-right order. For example,\n; (define x (list (list 1 2) (list 3 4))) \n; (fringe x)\n; (1 2 3 4)\n; (fringe (list x x))\n; (1 2 3 4 1 2 3 4)\n\n(define (fringe x)\n    (cond ((null? x) x)\n          ((not (pair? x)) (list x))\n          (else (append (fringe (car x)) (fringe (cdr x))))))\n\n(define x (list (list 1 2) (list 3 4))) \n(fringe x) ; (1 2 3 4)\n(fringe (list x x)) ; (1 2 3 4 1 2 3 4)"}}}},"pageContext":{"name":"2.28.scm","expr":"master:sicp/ch2-abstraction-data/2.28.scm"}}
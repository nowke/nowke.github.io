{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Make changes to the square limit of wave shown in Figure 2.9 by working at each \n; of the levels described above. In particular:\n; a. Add some segments to the primitive wave painter of Exercise 2.49 (to add a \n;    smile, for example).\n; b. Change the pattern constructed by corner-split (for example, by using only \n;    one copy of the up-split and right-split images instead of two).\n; c. Modify the version of square-limit that uses square-of-four so as to assemble \n;    the corners in a different pattern. (For example, you might make the big Mr. \n;    Rogers look outward from each corner of the square.)\n#lang racket\n(require (planet \"sicp.ss\" (\"soegaard\" \"sicp.plt\" 2 1)))\n\n; (a) Added a weird v shaped smile :>\n(define wave-list\n    (list\n     (make-segment (make-vect  0.01 0.8) (make-vect  0.1 0.56))\n     (make-segment (make-vect  0.1 0.56) (make-vect  0.2 0.6))\n     (make-segment (make-vect  0.2 0.6) (make-vect 0.3 0.58))\n     (make-segment (make-vect  0.3 0.58) (make-vect  0.2 0.75))\n     (make-segment (make-vect  0.2 0.75) (make-vect  0.4 1))\n     (make-segment (make-vect  0.6 1) (make-vect  0.8 0.75))\n     (make-segment (make-vect  0.8 0.75) (make-vect  0.7 0.58))\n     (make-segment (make-vect  0.7 0.58) (make-vect  0.8 0.6))\n     (make-segment (make-vect  0.8 0.6) (make-vect  1 0.4))\n     (make-segment (make-vect  0 0.61) (make-vect  0.1 0.35))\n     (make-segment (make-vect  0.1 0.35) (make-vect  0.2 0.5))\n     (make-segment (make-vect  0.2 0.5) (make-vect  0.3 0.35))\n     (make-segment (make-vect  0.3 0.35) (make-vect  0.2 0))\n     (make-segment (make-vect  0.3 0) (make-vect 0.5 0.25))\n     (make-segment (make-vect  0.5 0.25) (make-vect 0.65 0))\n     (make-segment (make-vect  0.75 0) (make-vect  0.6 0.4))\n     (make-segment (make-vect  0.6 0.4) (make-vect  1 0.2))\n     (make-segment (make-vect  0.4 0.8) (make-vect  0.5 0.6))\n     (make-segment (make-vect  0.5 0.6) (make-vect  0.6 0.8))))\n(define wave (segments->painter wave-list))\n(display \"\\nWave with wierd smile\\n\")\n(paint wave)\n\n; (b) Corner split using only 1 copy of up-split and right-split\n(define (up-split painter n)\n    (if (= n 0)\n        painter\n        (let ((smaller (up-split painter (- n 1))))\n           (below painter (beside smaller smaller)))))\n(define (right-split painter n)\n  (if (= n 0)\n      painter\n      (let ((smaller (right-split painter (- n 1))))\n        (beside painter (below smaller smaller)))))\n(define (corner-split painter n)\n  (if (= n 0)\n      painter\n      (let ((up (up-split painter (- n 1)))\n            (right (right-split painter (- n 1))))\n        (let ((top-left up)\n              (bottom-right right)\n              (corner (corner-split painter (- n 1))))\n          (beside (below painter top-left)\n                  (below bottom-right corner))))))\n\n(display \"\\nCorner split modifined\\n\")\n(paint (corner-split wave 3))\n\n; (c) Modified square-limit\n(define (square-of-four tl tr bl br)\n  (lambda (painter)\n    (let ((top (beside (tl painter) (tr painter)))\n          (bottom (beside (bl painter) (br painter))))\n      (below bottom top))))\n(define (square-limit painter n)\n  (let ((combine4 (square-of-four rotate270 rotate180\n                                  identity rotate90)))\n    (combine4 (corner-split painter n))))\n\n(display \"\\nOutward square-limit\\n\")\n(paint (square-limit wave 2))"}}}},"pageContext":{"name":"2.52.rkt","expr":"master:sicp/ch2-abstraction-data/2.52.rkt"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Define a procedure reverse that takes a list as argument and returns \n; a list of the same elements in reverse order:\n; (reverse (list 1 4 9 16 25)) \n; (25 16 9 4 1)\n\n(define (append list1 list2)\n    (if (null? list1)\n        list2\n        (cons (car list1) (append (cdr list1) list2))))\n\n; Recursive version\n(define (reverse items)\n    (if (null? items)\n        items\n        (append (reverse (cdr items)) (list (car items)))))\n\n(reverse (list 1 4 9 16 25)) ; (25 16 9 4 1)\n(reverse (list 1)) ; (1)\n(reverse (list 1 7)) ; (7 1)\n\n; Iterative version\n(define (reverse items)\n    (define (iter a b)\n        (if (null? a)\n            b\n            (iter (cdr a) (cons (car a) b)))\n    )\n    (iter (cdr items) (list (car items))))\n\n(reverse (list 1 4 9 16 25)) ; (25 16 9 4 1)"}}}},"pageContext":{"name":"2.18.scm","expr":"master:sicp/ch2-abstraction-data/2.18.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Straightforward primality testing\n; Test divisors b/w 1 to sqrt(n)\n; Order of growth = Θ(√n).\n(define (divides? a b) (= (remainder b a) 0))\n\n(define (prime? n)\n    (define (smallest-divisor n) (find-divisor n 2))\n    (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor) n) n)\n              ((divides? test-divisor n) test-divisor)\n              (else (find-divisor n (+ test-divisor 1)))))\n    (= n (smallest-divisor n))\n)\n(prime? 11)\n(prime? 19)\n(prime? 20)\n\n; Fermat test\n; If n is a prime number and a is any positive integer less \n; than n, then a raised to the nth power is congruent to a modulo n\n(define (even? x) (= (remainder x 2) 0))\n(define (expmod base exp m)\n    (cond ((= exp 0) 1)\n          ((even? exp)\n           (remainder\n            (square (expmod base (/ exp 2) m))\n             m)) \n          (else\n            (remainder\n             (* base (expmod base (- exp 1) m))\n             m))))\n(define (fermat-test n) \n    (define (try-it a)\n     (= (expmod a n n) a))\n    (try-it (+ 1 (random (- n 1)))))\n\n(define (fast-prime? n times) \n    (cond ((= times 0) true)\n          ((fermat-test n) (fast-prime? n (- times 1))) \n          (else false)))\n(fast-prime? 19 10)"}}}},"pageContext":{"name":"primality.scm","expr":"master:sicp/ch1-abstraction-procedures/primality.scm"}}
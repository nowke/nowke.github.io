{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"#lang racket\n(require (planet \"sicp.ss\" (\"soegaard\" \"sicp.plt\" 2 1)))\n\n; NOTE: \"frame-coord-map\", \"make-vect\", \"make-frame\", \"make-segment\", \"segments->painter\"\n; are defined in \"soegaard\"\n\n; Define helpers\n(define (xcor-vect v) (car v))\n(define (ycor-vect v) (cdr v))\n(define (sub-vect v1 v2)\n    (make-vect \n        (- (xcor-vect v1) (xcor-vect v2))\n        (- (ycor-vect v1) (ycor-vect v2))))\n\n; Transform painter\n(define (transform-painter painter origin corner1 corner2)\n  (lambda (frame)\n    (let ((m (frame-coord-map frame)))\n      (let ((new-origin (m origin)))\n        (painter (make-frame\n                   new-origin\n                   (sub-vect (m corner1) new-origin)\n                   (sub-vect (m corner2) new-origin)))))))\n\n; Flip-vertically\n(define (flip-vert painter)\n  (transform-painter painter\n                     (make-vect 0 1)   ; new origin\n                     (make-vect 1 1)   ; new end of edge1\n                     (make-vect 0 0))) ; new end of edge2\n\n; Test vertical flip\n(define f1-list (list (make-segment (make-vect 0.3 0.3) (make-vect 0.5 0.7))\n                      (make-segment (make-vect 0.5 0.7) (make-vect 0.8 0.3))))\n(define f1 (segments->painter f1-list))\n(display \"\\nFrame f1\\n\")\n(paint f1)\n\n(display \"\\nFrame Flipped f1\\n\")\n(paint (flip-vert f1))\n\n; Shrink image to upper-right-corner\n(define (shrink-to-upper-right painter)\n  (transform-painter\n   painter (make-vect 0.5 0.5)\n   (make-vect 1.0 0.5) (make-vect 0.5 1.0)))\n\n(display \"\\nFrame Shrink upper right corner f1\\n\")\n(paint (shrink-to-upper-right f1))\n\n; Rotate 90 degrees counterclockwise\n(define (rotate90 painter)\n  (transform-painter painter\n                     (make-vect 1.0 0.0)\n                     (make-vect 1.0 1.0)\n                     (make-vect 0.0 0.0)))\n\n(display \"\\nFrame Rotate 90deg f1\\n\")\n(paint (rotate90 f1))\n\n; Squash inwards\n(define (squash-inwards painter)\n  (transform-painter painter\n                     (make-vect 0.0 0.0)\n                     (make-vect 0.65 0.35)\n                     (make-vect 0.35 0.65)))\n\n(display \"\\nFrame Squash inwards f1\\n\")\n(paint (squash-inwards f1))\n\n; Beside operation by transformation\n(define (beside painter1 painter2)\n  (let ((split-point (make-vect 0.5 0.0)))\n    (let ((paint-left (transform-painter\n            painter1\n            (make-vect 0.0 0.0)\n            split-point\n            (make-vect 0.0 1.0)))\n          (paint-right\n           (transform-painter\n            painter2\n            split-point\n            (make-vect 1.0 0.0)\n            (make-vect 0.5 1.0))))\n      (lambda (frame) (paint-left frame) (paint-right frame)))))\n\n(display \"\\nBeside f1 f1\\n\")\n(paint (beside f1 f1))"}}}},"pageContext":{"name":"painter-transform.rkt","expr":"master:sicp/ch2-abstraction-data/painter-transform.rkt"}}
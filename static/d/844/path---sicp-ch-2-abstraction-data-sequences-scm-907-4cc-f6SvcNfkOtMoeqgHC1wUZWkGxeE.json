{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; List\n(define mylist (list 1 2 3 4))\n\n(car mylist) ;Value: 1\n(cdr mylist) ;Value 2: (2 3 4)\n\n(cadr mylist) ;Value: 2\n\n; Implementation of `list-ref`\n(define (list-ref items n)\n    (if (= n 0)\n        (car items)\n        (list-ref (cdr items) (- n 1))))\n\n(define squares (list 1 4 9 16 25))\n(list-ref squares 3) ;Value: 16\n\n; Length of a list\n(define (length items)\n    (if (null? items)\n        0\n        (+ 1 (length (cdr items)))))\n\n(define odds (list 1 3 5 7))\n(length odds) ;Value: 4\n\n; Iterative length\n(define (length items)\n    (define (iter a count)\n        (if (null? a)\n            count\n            (iter (cdr a) (+ 1 count))))\n    (iter items 0))\n(define evens (list 2 4 6 8))\n(length evens) ;Value: 4\n\n; Append procedure\n(define (append list1 list2)\n    (if (null? list1)\n        list2\n        (cons (car list1) (append (cdr list1) list2))))\n\n(append odds evens) ;(1 3 5 7 2 4 6 8)"}}}},"pageContext":{"name":"sequences.scm","expr":"master:sicp/ch2-abstraction-data/sequences.scm"}}
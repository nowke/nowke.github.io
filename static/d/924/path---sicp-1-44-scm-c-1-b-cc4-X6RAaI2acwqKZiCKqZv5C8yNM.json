{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The idea of smoothing a function is an important concept \n; in signal processing. If f is a function and dx is some \n; small number, then the smoothed version of f is the \n; function whose value at a point x is the average of \n; f(xâˆ’dx), f(x), and f(x+dx). Write a procedure smooth \n; that takes as input a procedure that computes f and \n; returns a procedure that computes the smoothed f. \n; It is sometimes valuable to repeatedly smooth a \n; function (that is, smooth the smoothed function, and so \n; on) to obtain the n-fold smoothed function. Show how to \n; generate the n-fold smoothed function of any given function \n; using `smooth` and `repeated` from Exercise 1.43.\n\n; Answer\n; (i) Let's define `repeated` procedure\n(define (compose f g)\n    (lambda (x) (f (g x))))\n(define (repeated f n)\n    (if (= n 1) (lambda (x) (f x))\n        (compose f (repeated f (- n 1))))\n)\n\n; (ii) Write `smooth` procedure\n(define (average a b c) (/ (+ a b c) 3))\n(define dx 0.0001)\n(define (smooth f)\n    (lambda (x) (average (f (- x dx)) (f x) (f (+ x dx)))))\n\n; (iii) Write `n-fold-smooth` procedure\n(define (n-fold-smooth f n) (repeated (smooth f) n))\n\n((n-fold-smooth (lambda (x) (sin x)) 10) 3.1415) ;Value: 9.265358537893419e-5"}}}},"pageContext":{"name":"1.44.scm","expr":"master:sicp/ch1-abstraction-procedures/1.44.scm"}}
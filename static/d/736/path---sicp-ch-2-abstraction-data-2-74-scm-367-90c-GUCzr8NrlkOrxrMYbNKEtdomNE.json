{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Insatiable Enterprises, Inc., is a highly decentralized conglomerate company \n; consisting of a large number of independent divisions located all over the world. \n; The company’s computer facilities have just been interconnected by means of a\n; clever network-interfacing scheme that makes the entire network appear to any user\n; to be a single computer. Insatiable’s president, in her first attempt to exploit \n; the ability of the network to extract administrative information from division \n; files, is dismayed to discover that, although all the division files have been \n; implemented as data structures in Scheme, the particular data structure used \n; varies from division to division. A meeting of division managers is hastily called \n; to search for a strategy to integrate the files that will satisfy headquarters’ \n; needs while preserving the existing autonomy of the divisions.\n\n; Show how such a strategy can be implemented with data- directed programming. As an\n; example, suppose that each division’s personnel records consist of a single file, \n; which contains a set of records keyed on employees’ names. The structure of the set\n; varies from division to division. Furthermore, each employee’s record is itself a \n; set (structured differently from division to division) that contains information \n; keyed under identifiers such as address and salary. In particular:\n\n; (a) Implement for headquarters a `get-record` procedure that retrieves a specified \n;     employee’s record from a specified personnel file. The procedure should be \n;     applicable to any division’s file. Explain how the individual divisions’ files \n;     should be structured. In particular, what type information must be supplied?\n\n; Ans:\n; Headquarter should have the following structure with division name and file\n(define (make-hq-file division file)\n    (cons division file))\n(define (get-division file) (car file))\n(define (get-file file) (cdr file))\n\n; `get-record` method\n(define (get-record name file)\n    ((get 'get-record (get-division file)) \n        name (get-file file)))\n\n; (b) Implement for headquarters a `get-salary` procedure that returns the salary\n;     information from a given employee’s record from any division’s personnel file. \n;     How should the record be structured in order to make this operation work?\n\n(define (make-hq-record division record)\n    (cons division record))\n(define (get-record-division record) (car record))\n(define (get-record-hq record) (cdr record))\n\n(define (get-salary file)\n    ((get 'get-salary (get-division file))\n        (get-record-hq file)))\n\n; (c) Implement for headquarters a `find-employee-record` procedure. This should \n;     search all the divisions’ files for the record of a given employee and return\n;     the record. Assume that this procedure takes as arguments an employee’s name \n;     and a list of all the divisions’ files.\n(define (find-employee-record name files)\n    (cond ((null? files) '())\n          ((not (null? (get-record name (car files)))) \n            (get-record name (car files)))\n          (else (find-employee-record name (cdr files)))))\n\n; (d) When Insatiable takes over a new company, what changes must be made in order \n;     to incorporate the new personnel information into the central system?\n\n; Ans:\n; The new division's methods should be installed like pacakge\n(define (install-new-company)\n    (put 'new-company 'get-record new-company-get-record)\n    (put 'new-company 'get-salary new-company-get-salary)\n    'done)"}}}},"pageContext":{"name":"2.74.scm","expr":"master:sicp/ch2-abstraction-data/2.74.scm"}}
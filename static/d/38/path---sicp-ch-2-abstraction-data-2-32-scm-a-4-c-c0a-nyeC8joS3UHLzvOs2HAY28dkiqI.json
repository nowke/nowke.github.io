{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; We can represent a set as a list of distinct elements, and we can represent the \n; set of all subsets of the set as a list of lists. For example, if the set is \n; (1 2 3), then the set of all subsets is (() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3)). \n; Complete the following definition of a procedure that generates the set of subsets\n;  of a set and give a clear explanation of why it works:\n; \n; (define (subsets s) \n;     (if (null? s)\n;         (list nil)\n;         (let ((rest (subsets (cdr s))))\n;           (append rest (map ⟨??⟩ rest)))))\n\n(define (subsets s) \n    (if (null? s)\n        (list '())\n        (let ((rest (subsets (cdr s))))\n          (append rest \n                  (map (lambda (x) (cons (car s) x)) \n                       rest)))))\n\n(subsets \n    (list 1 2 3)) ; (() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))\n\n; Explanation\n; ==================================\n; Let's say S = (1, 2, 3)\n; In our recursive step,\n;   rest = subset (2, 3)\n;  subset (2, 3) is actually => {(), (2), (3), (2, 3)} \n; Also (car S) = 1\n; If we append subset (2, 3) with \"1\" added to each element of subset(2, 3)\n; we get back subset (1, 2, 3)\n\n; i.e.\n; x = (1) => subset(2, 3) => {(1), (1 2), (1 3), (1 2 3)}\n; y = subset(2, 3)\n; x + y = {(1), (1 2), (1 3), (1 2 3), (), (2), (3), (2 3)}\n"}}}},"pageContext":{"name":"2.32.scm","expr":"master:sicp/ch2-abstraction-data/2.32.scm"}}
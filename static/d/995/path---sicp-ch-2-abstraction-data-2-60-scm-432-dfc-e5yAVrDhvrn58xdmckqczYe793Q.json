{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; We specified that a set would be represented as a list with no duplicates. Now \n; suppose we allow duplicates. For instance, the set {1, 2, 3} could be represented \n; as the list (2 3 2 1 3 2 2). Design procedures element-of-set?, adjoin-set, \n; union-set, and intersection-set that operate on this representation. How does \n; the efficiency of each compare with the corresponding procedure for the \n; non-duplicate representation? Are there applications for which you would use \n; this representation in preference to the non-duplicate one?\n\n; Unchanged\n(define (element-of-set? x set)\n    (cond ((null? set) false)\n          ((equal? x (car set)) #t)\n          (else (element-of-set? x (cdr set)))))\n\n(define (adjoin-set x set) (cons x set)) \n(define (union-set set1 set2) (append set1 set2)) \n\n(define (intersection-set set1 set2) \n    (cond ((or (null? set1) (null? set2)) '()) \n          ((element-of-set? (car set1) set2)         \n           (cons (car set1) \n                 (intersection-set (cdr set1) set2))) \n          (else (intersection-set (cdr set1) set2)))) \n\n(intersection-set (list 1 1 3 3 4 5) (list 3 3 5))\n; (3 3 5)\n\n(union-set (list 1 2 2 3) (list 3 4 7))\n; (1 2 2 3 3 4 7)\n\n; Note: For intersection, i quite didn't get the question, hence assuming the method\n; remains the same as previous\n\n; Both `adjoin-set` and `union-set` have O(1) running time"}}}},"pageContext":{"name":"2.60.scm","expr":"master:sicp/ch2-abstraction-data/2.60.scm"}}
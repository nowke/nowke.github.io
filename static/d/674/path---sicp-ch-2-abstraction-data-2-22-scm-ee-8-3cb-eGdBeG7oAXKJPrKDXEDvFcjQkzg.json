{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Louis Reasoner tries to rewrite the first square-list procedure of \n; Exercise 2.21 so that it evolves an iterative process:\n(define nil '())\n(define (square-list items) \n    (define (iter things answer)\n        (if (null? things) \n            answer\n            (iter (cdr things)\n                  (cons (square (car things))\n                        answer))))\n    (iter items nil))\n(square-list (list 1 2 3 4)) ; (16 9 4 1)\n\n; Unfortunately, defining square-list this way produces the answer list \n; in the reverse order of the one desired. Why? Louis then tries to fix \n; his bug by interchanging the arguments to cons:\n(define (square-list items)\n    (define (iter things answer) \n        (if (null? things)\n            answer\n            (iter (cdr things)\n                  (cons answer\n                        (square (car things))))))\n    (iter items nil))\n\n(square-list (list 1 2 3 4)) ; ((((() . 1) . 4) . 9) . 16)\n; This doesnâ€™t work either. Explain.\n\n; ====================================\n; Answer\n; ====================================\n; (i) Prints in reverse order\n;  => Let's traverse with (1 2 3 4)\n; round      things          answer\n;   1       (1 2 3 4)          ()\n;             (2 3 4)        (cons (square 1) ())\n;             (2 3 4)          (1)\n;   2           (3 4)        (cons (square 2) (1))\n;               (3 4)        (cons 4 (1))\n;               (3 4)        (4 1)\n;   3             (4)        (cons (square 3) (4 1))\n;                 (4)        (9 4 1)\n;   4              ()        (16 9 4 1)\n\n; (ii) Prints nested structures\n; round       things         answer\n;  1         (1 2 3 4)         ()\n;              (2 3 4)         (cons () (square 1))\n;              (2 3 4)         (cons () 1)\n;              (2 3 4)         (() . 1)\n;  2             (3 4)         (cons (() . 1) (square 2))\n;                (3 4)         ((() . 1) . 4)\n;  ...                         ...\n;                              ((((() . 1) . 4) . 9) . 16)\n\n; To fix this, we must append two lists instead of `cons`"}}}},"pageContext":{"name":"2.22.scm","expr":"master:sicp/ch2-abstraction-data/2.22.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; One variant of the Fermat test that cannot be fooled \n; is called the Miller-Rabin test (Miller 1976; Rabin 1980). \n; This starts from an alternate form of Fermat’s Little Theorem, \n; which states that if n is a prime number and a is any positive \n; integer less than n,then a raised to the (n−1)-st power is \n; congruent to 1 modulo n. To test the primality of a number n by \n; the Miller-Rabin test, we pick a random number a < n and raise a to \n; the (n−1)-st power modulo n using the `expmod` procedure. However, \n; whenever we perform the squaring step in expmod, we check to see \n; if we have discovered a “nontrivial square root of 1 modulo n,” that \n; is, a number not equal to 1 or n − 1 whose square is equal to 1 modulo n. \n; It is possible to prove that if such a nontrivial square root of 1 exists, \n; then n is not prime. It is also possible to prove that if n is an odd \n; number that is not prime, then, for at least half the numbers a < n, \n; computing a^(n−1) in this way will reveal a nontrivial square root of 1 modulo n. \n; This is why the Miller-Rabin test cannot be fooled.) Modify the expmod procedure \n; to signal if it discovers a nontrivial square root of 1, and use this to \n; implement the Miller-Rabin test with a procedure analogous to fermat-test. \n; Check your procedure by testing various known primes and non-primes. \n; Hint: One convenient way to make expmod signal is to have it return 0.\n\n(define (even? x) (= (remainder x 2) 0))\n(define (expmod base exp m)\n    (cond ((= exp 0) 1)\n          ((even? exp)\n           (remainder (square (test-non-trivial (expmod base (/ exp 2) m)\n                                                m)) m))\n          (else (remainder (* base (expmod base (- exp 1) m))\n                           m))))\n(define (test-non-trivial x n)\n    (cond ((and (= (remainder (square x) n) 1)\n               (not (= x 1))\n               (not (= x (- n 1))))\n           0)\n          (else x)))\n\n(define (miller-rabin-test n)\n    (define (miller-rabin-test-iter a)\n        (cond ((= a 0) #t)\n              ((check-num (+ 1 (random (- n 1))))\n                (miller-rabin-test-iter (- a 1)))\n              (else #f)))\n    (define (check-num a)\n            (= (expmod a (- n 1) n) 1))\n    (miller-rabin-test-iter 100)              \n)\n\n; Testing with actual prime numbers\n(miller-rabin-test 2) ;Value: #t\n(miller-rabin-test 17) ;Value: #t\n(miller-rabin-test 19) ;Value: #t\n\n; Testing with Carmichael numbers (should be false)\n(miller-rabin-test 561)\n(miller-rabin-test 1105)\n(miller-rabin-test 1729)\n(miller-rabin-test 2465)\n(miller-rabin-test 2821)\n(miller-rabin-test 6601)"}}}},"pageContext":{"name":"1.28.scm","expr":"master:sicp/ch1-abstraction-procedures/1.28.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Define a procedure cubic that can be used together with the \n; `newtons-method` procedure in expressions of the form\n; (newtons-method (cubic a b c) 1)\n; to approximate zeros of the cubic x3 + ax2 + bx + c.\n(define (cube x) (* x x x))\n(define (cubic a b c)\n    (lambda (x) (+ (cube x) (* a (square x)) (* b x) c)))\n\n; Using with `newtons-method`\n(define (deriv g)\n    (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))\n(define dx 0.00001)\n(define tolerance 0.00001)\n(define (fixed-point f first-guess)\n    (define (close-enough? v1 v2)\n        (< (abs (- v1 v2)) tolerance))\n    (define (try guess)\n        (let ((next (f guess)))\n            (if (close-enough? guess next)\n                next\n                (try next))))\n    (try first-guess))\n(define (newton-transform g)\n    (lambda (x) (- x (/ (g x) ((deriv g) x)))))\n\n(define (newtons-method g guess) (fixed-point (newton-transform g) guess))\n(newtons-method (cubic 3 1 19) 1) ;Value: -3.959409544418823 (~4)"}}}},"pageContext":{"name":"1.40.scm","expr":"master:sicp/ch1-abstraction-procedures/1.40.scm"}}
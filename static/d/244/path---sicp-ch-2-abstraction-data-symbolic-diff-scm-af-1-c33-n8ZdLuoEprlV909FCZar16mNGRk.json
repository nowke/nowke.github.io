{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Derivative in terms of abstract terms\n\n(define (deriv exp var)\n    (cond ((number? exp) 0)\n          ((variable? exp) (if (same-variable? exp var) 1 0))\n          ((sum? exp) (make-sum (deriv (addend exp) var)\n                                (deriv (augend exp) var)))\n          ((product? exp)\n            (make-sum\n                (make-product \n                    (multiplier exp)\n                    (deriv (multiplicand exp) var))\n                (make-product\n                    (deriv (multiplier exp) var)\n                    (multiplicand exp))))\n          (else\n            (error \"unknown expression type: DERIV\" exp))))\n\n; Representing algebraic expressions\n(define (variable? x) (symbol? x))\n\n(define (same-variable? v1 v2)\n    (and (variable? v1) (variable? v2) (eq? v1 v2)))\n\n(define (make-sum a1 a2) (list '+ a1 a2))\n(define (make-product m1 m2) (list '* m1 m2))\n\n; Sum is a list whose first element is symbol +:\n(define (sum? x) (and (pair? x) (eq? (car x) '+)))\n(define (addend s) (cadr s))\n(define (augend s) (caddr s))\n\n; Product is a list whose first element is symbol *:\n(define (product? x) (and (pair? x) (eq? (car x) '*)))\n(define (multiplier p) (cadr p))\n(define (multiplicand p) (caddr p))\n\n; Basic examples\n(deriv '(+ x 3) 'x)\n; (+ 1 x)\n\n(deriv '(* x y) 'x)\n; (+ (* x 0) (* 1 y))\n\n(deriv '(* (* x y) (+ x 3)) 'x)\n; (+ (* (* x y) (+ 1 x)) (* (+ (* x 0) (* 1 y)) (+ x 3)))\n\n; Simplifying expressions\n(define (=number? exp num) \n    (and (number? exp) (= exp num)))\n(=number? 'a 0) ; false\n(=number? 1 1) ; true\n\n(define (make-sum a1 a2) \n    (cond ((=number? a1 0) a2) \n          ((=number? a2 0) a1)\n          ((and (number? a1) (number? a2)) (+ a1 a2))\n          (else (list '+ a1 a2))))\n\n(make-sum 2 3) ;Value: 5\n(make-sum 'x 0) ;Value: x\n(make-sum 0 'y) ;Value: y\n(make-sum 'x 'y) ;(+ x y)\n\n(define (make-product m1 m2) \n    (cond ((or (=number? m1 0) (=number? m2 0)) 0)\n          ((=number? m1 1) m2)\n          ((=number? m2 1) m1)\n          ((and (number? m1) (number? m2)) (* m1 m2))\n          (else (list '* m1 m2))))\n\n(make-product 4 8) ;Value: 32\n(make-product 'x 1) ;Value: x\n(make-product 1 'x) ;Value: x\n(make-product 'y 0) ;Value: 0\n(make-product 0 'y) ;Value: 0\n(make-product 'x 'y) ;(* x y)\n\n; Testing\n(deriv '(+ x 3) 'x)\n; 1\n\n(deriv '(* x y) 'x)\n; y\n\n(deriv '(* (* x y) (+ x 3)) 'x)\n; (+ (* x y) (* y (+ x 3)))"}}}},"pageContext":{"name":"symbolic-diff.scm","expr":"master:sicp/ch2-abstraction-data/symbolic-diff.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Using the results of Exercise 1.16 and Exercise 1.17, \n; devise a procedure that generates an iterative process \n; for multiplying two integers in terms of adding, doubling, \n; and halving and uses a logarithmic number of steps\n\n(define (fast-mul a b)\n    (define (even? x) (= (remainder x 2) 0))\n    (define (double x) (+ x x))\n    (define (halve x) (/ x 2))\n    (define (fast-mul-iter a counter sum)\n        (cond ((= counter 0) sum)\n              ((even? counter) \n                (fast-mul-iter (double a) (halve counter) sum))\n              (else \n                (fast-mul-iter a (- counter 1) (+ a sum)))\n        )\n    )\n    (fast-mul-iter a b 0)\n)\n\n(fast-mul 2 6) ;Value: 12\n(fast-mul 24 67) ;Value: 1608\n(fast-mul 1 7) ;Value: 7"}}}},"pageContext":{"name":"1.18.scm","expr":"master:sicp/ch1-abstraction-procedures/1.18.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Define a generic equality predicate `equ?` that tests the equality of two numbers, \n; and install it in the generic arithmetic package. This operation should work for \n; ordinary numbers, rational numbers, and complex numbers.\n\n(load \"arithmetic-package.scm\")\n\n; (define (numer x) (apply-generic 'numer x))\n; (define (denom x) (apply-generic 'denom x))\n\n(define (equ? x y) (apply-generic 'equ? x y))\n\n; Define `equ?` for each type\n(put 'equ? '(scheme-number scheme-number) =) ; Equality operator for number\n(put 'equ? '(rational_ rational_)   ; => Defined inside arithmetic-package itself\n     (lambda (x y) \n        (and (= (numer x) (numer y))\n             (= (denom x) (denom y)))))\n(put 'equ? '(complex complex)\n     (lambda (z1 z2)\n        (and (= (real-part z1) (real-part z2))\n             (= (imag-part z1) (imag-part z2)))))\n\n; Testing\n(equ? (make-scheme-number 42) (make-scheme-number 42)) ;#t\n(equ? (make-scheme-number 42) (make-scheme-number 0))  ;#f\n(equ? (make-rational 5 10) (make-rational 100 200)) ;#t\n(equ? (make-complex-from-real-imag 1 2) (make-complex-from-real-imag 1 2)) ;#t"}}}},"pageContext":{"name":"2.79.scm","expr":"master:sicp/ch2-abstraction-data/2.79.scm"}}
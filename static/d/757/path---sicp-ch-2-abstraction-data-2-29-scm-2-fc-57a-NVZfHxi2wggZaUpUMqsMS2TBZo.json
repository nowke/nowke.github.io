{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; A binary mobile consists of two branches, a left branch and a right branch. \n; Each branch is a rod of a certain length, from which hangs either a weight \n; or another binary mobile. We can represent a binary mobile using compound \n; data by constructing it from two branches (for example, using list):\n(define (make-mobile left right) \n    (list left right))\n\n; A branch is constructed from a length (which must be a number) together \n; with a structure, which may be either a number (representing a simple weight) \n; or another mobile:\n(define (make-branch length structure) \n    (list length structure))\n\n; (a) Write the corresponding selectors `left-branch` and `right-branch`, which \n;     return the branches of a mobile, and `branch-length` and `branch-structure`, \n;     which return the components of a branch.\n;  Ans\n(define (left-branch mobile) (car mobile))\n(define (right-branch mobile) (car (cdr mobile))) ; (cdr x) => (right), (car (right)) => right\n(define (branch-length branch) (car branch))\n(define (branch-structure branch) (car (cdr branch)))\n\n; (b) Using your selectors, define a procedure `total-weight` that returns the \n;     total weight of a mobile.\n;  Ans\n(define (total-weight mobile)\n    (cond ((null? mobile) 0)\n          ((not (pair? mobile)) mobile)\n          (else (+ (total-weight (branch-structure (left-branch mobile)))\n                   (total-weight (branch-structure (right-branch mobile)))))))\n\n; Testing\n(define m1 (make-mobile \n            (make-branch 5 20)\n            (make-branch 6 25)))\n(left-branch m1) ; (5 20)\n(right-branch m1) ; (6 25)\n(branch-length (left-branch m1)) ;Value: 5\n(branch-structure (left-branch m1)) ; 20\n(branch-length (right-branch m1)) ;Value: 6\n(branch-structure (right-branch m1)) ;Value: 25\n\n(total-weight m1) ;Value: 45 (20 + 25)\n\n(define m2 (make-mobile\n            (make-branch 5 \n                         (make-mobile (make-branch 8 22) \n                                      (make-branch 9 10)))\n            (make-branch 6 25)))\n(total-weight m2) ;Value: 57 (22 + 10 +25)\n\n; (c) A mobile is said to be balanced if the torque applied by its top-left \n;     branch is equal to that applied by its top-right  branch (that is, if \n;     the length of the left rod multiplied by the weight hanging from that \n;     rod is equal to the corresponding product for the right side) and if \n;     each of the submobiles hanging off its branches is balanced. Design a \n;     predicate that tests whether a binary mobile is balanced.\n\n; Torque of a branch = (length) x (total weight of it's structure)\n(define (torque branch)\n    (* (branch-length branch) \n        (total-weight (branch-structure branch))))\n\n(define (is-balanced? mobile)\n    (if (not (pair? mobile))\n        #t  ; Return true for a plain number\n        (and (= (torque (left-branch mobile)) (torque (right-branch mobile)))\n             (is-balanced? (branch-structure (left-branch mobile)))\n             (is-balanced? (branch-structure (right-branch mobile)))))\n)\n\n; Testing\n(define b1 \n    (make-mobile \n        (make-branch 5 10)\n        (make-branch 25 2)))\n(is-balanced? b1) ;Value: #t (5x10 = 25x2 = 50)\n\n(define b2\n    (make-mobile\n        (make-branch \n            5 \n            (make-mobile\n                (make-branch 1 8)\n                (make-branch 4 2)))\n        (make-branch 25 2)))\n; Here, \n;   Torque of right-b2 = 25 x 2 = 50\n;   Torque of left-b2 = 5 * (weight of structure(left-b2))\n;                     = 5 * (8 + 2)\n;                     = 50\n;   Also, inside structure(left-b2)\n;       Torques - (1 x 8) = (4 x 2) = 8\n;  Hence, mobile is balanced\n(is-balanced? b2) ;Value: #t \n\n; (d) Suppose we change the representation of mobiles so that the constructors are\n(define (make-mobile left right) \n    (cons left right)) \n(define (make-branch length structure)\n    (cons length structure))\n;     How much do you need to change your programs to convert to the new \n;     representation?\n\n; Ans: We need to slightly change the definition of the following\n(define (left-branch mobile) (car mobile))\n(define (right-branch mobile) (cdr mobile))\n(define (branch-length branch) (car branch))\n(define (branch-structure branch) (cdr branch))\n\n; Rest will work as it is,\n; Testing\n; (Redefine `total-weight`)\n(define (total-weight mobile)\n    (cond ((null? mobile) 0)\n          ((not (pair? mobile)) mobile)\n          (else (+ (total-weight (branch-structure (left-branch mobile)))\n                   (total-weight (branch-structure (right-branch mobile)))))))\n(define m3 (make-mobile \n            (make-branch 5 20)\n            (make-branch 6 25)))\n(total-weight m3) ;Value: 45"}}}},"pageContext":{"name":"2.29.scm","expr":"master:sicp/ch2-abstraction-data/2.29.scm"}}
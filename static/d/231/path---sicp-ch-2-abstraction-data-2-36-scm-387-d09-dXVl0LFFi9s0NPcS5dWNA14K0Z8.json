{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The procedure accumulate-n is similar to accumulate except that it takes as its \n; third argument a sequence of sequences, which are all assumed to have the same \n; number of elements. It applies the designated accumulation procedure to combine \n; all the first elements of the sequences, all the second elements of the sequences, \n; and so on, and returns a sequence of the results. For instance, if s is a sequence \n; containing four sequences, ((1 2 3) (4 5 6) (7 8 9) (10 11 12)), then the value \n; of (accumulate-n + 0 s) should be the sequence (22 26 30). Fill in the missing \n; expressions in the following definition of accumulate-n:\n; (define (accumulate-n op init seqs) \n;     (if (null? (car seqs))\n;         nil\n;         (cons (accumulate op init ⟨??⟩)\n;               (accumulate-n op init ⟨??⟩))))\n\n(define nil '())\n(define (accumulate op initial sequence)\n    (if (null? sequence) \n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n\n(define (accumulate-n op initial seqs)\n    (if (null? (car seqs))\n        nil\n        (cons (accumulate op initial (map car seqs))\n              (accumulate-n op initial (map cdr seqs)))))\n(accumulate-n \n    + \n    0 \n    (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12))) ; (22 26 30)"}}}},"pageContext":{"name":"2.36.scm","expr":"master:sicp/ch2-abstraction-data/2.36.scm"}}
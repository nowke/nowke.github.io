{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Show that `sum` and `product` (Exercise 1.31) are both\n; special cases of a still more general notion called \n; `accumulate` that combines a collection of terms, \n; using some general accumulation function\n; \"\"\"\"\"\"\"\"\"\"\"\"\"\"\n; (accumulate combiner null-value term a next b)\n; \"\"\"\"\"\"\"\"\"\"\"\"\"\"\n; accumulate takes as arguments the same term and range \n; specifications as `sum` and `product`, together with\n; a `combiner` procedure (of two arguments) that specifies \n; how the current term is to be combined with the accumulation \n; of the preceding terms and a `null-value` that specifies what \n; base value to use when the terms run out. Write accumulate \n; and show how `sum` and `product` can both be defined as \n; simple calls to `accumulate`.\n\n(define (accumulate combiner null-value term a next b)\n    (if (> a b) null-value\n        (combiner (term a)\n                  (accumulate combiner null-value term (next a) next b))))\n\n(define (product term a next b)\n    (accumulate * 1 term a next b))\n\n(define (sum term a next b)\n    (accumulate + 0 term a next b))\n\n; Verify `product` by factorial\n(define (factorial n)\n    (define (f x) x)\n    (define (next x) (+ x 1))\n    (product f 1 next n))\n\n(factorial 0) ;Value: 1\n(factorial 1) ;Value: 1\n(factorial 2) ;Value: 2\n(factorial 5) ;Value: 120\n\n; Verify `sum` by `pi-sum`\n(define (pi-sum a b) \n    (define (pi-term x)\n        (/ 1.0 (* x (+ x 2)))) \n    (define (pi-next x)\n        (+ x 4))\n  (sum pi-term a pi-next b))\n(* 8 (pi-sum 1 1000)) ;Value: 3.139592655589783"}}}},"pageContext":{"name":"1.32.a.scm","expr":"master:sicp/ch1-abstraction-procedures/1.32.a.scm"}}
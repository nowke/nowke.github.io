{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"#lang racket\n(require (planet \"sicp.ss\" (\"soegaard\" \"sicp.plt\" 2 1)))\n(define wave einstein) ; Make compatible with the text book\n\n; Square of four higher order procedure\n(define (square-of-four tl tr bl br)\n  (lambda (painter)\n    (let ((top (beside (tl painter) (tr painter)))\n          (bottom (beside (bl painter) (br painter))))\n      (below bottom top))))\n\n; Flipped pair in terms of `square-of-four`\n(define (flipped-pairs painter)\n  (let ((combine4 (square-of-four identity flip-vert\n                                  identity flip-vert)))\n    (combine4 painter)))\n\n(define f1 (flipped-pairs wave))\n(display \"Flipped pair\\n\")\n(paint f1)\n\n; Square limit in terms of `square-of-four`\n(define (square-limit painter n)\n  (let ((combine4 (square-of-four flip-horiz identity\n                                  rotate180 flip-vert)))\n    (combine4 (corner-split painter n))))\n\n(define (up-split painter n)\n    (if (= n 0)\n        painter\n        (let ((smaller (up-split painter (- n 1))))\n           (below painter (beside smaller smaller)))))\n(define (right-split painter n)\n  (if (= n 0)\n      painter\n      (let ((smaller (right-split painter (- n 1))))\n        (beside painter (below smaller smaller)))))\n(define (corner-split painter n)\n  (if (= n 0)\n      painter\n      (let ((up (up-split painter (- n 1)))\n            (right (right-split painter (- n 1))))\n        (let ((top-left (beside up up))\n              (bottom-right (below right right))\n              (corner (corner-split painter (- n 1))))\n          (beside (below painter top-left)\n                  (below bottom-right corner))))))\n\n(define sl1 (square-limit wave 3))\n(display \"\\nSquare limit 3\\n\")\n(paint sl1)"}}}},"pageContext":{"name":"paint-higher-order.rkt","expr":"master:sicp/ch2-abstraction-data/paint-higher-order.rkt"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Perform arithmetic operations on rational numbers\n(define (add-rat x y)\n    (make-rat (+ (* (numer x) (denom y))\n                 (* (numer y) (denom x)))\n              (* (denom x) (denom y))))\n\n(define (sub-rat x y)\n    (make-rat (- (* (numer x) (denom y))\n                (* (numer y) (denom x)))\n            (* (denom x) (denom y))))\n\n(define (mul-rat x y)\n    (make-rat (* (numer x) (numer y))\n              (* (denom x) (denom y))))\n\n(define (div-rat x y)\n    (make-rat (* (numer x) (denom y))\n              (* (denom x) (numer y))))\n\n(define (equal-rat x y)\n    (= (* (numer x) (denom y))\n       (* (numer y) (denom x))))\n\n; Define `make-rat`, `numer` and `denom` using pairs\n(define (make-rat n d) (cons n d))\n(define (numer x) (car x))\n(define (denom x) (cdr x))\n\n; Display rational number\n(define (print-rat x)\n    (newline)\n    (display (numer x))\n    (display \"/\")\n    (display (denom x)))\n\n; Examples\n(define one-half (make-rat 1 2))\n(print-rat one-half) ; 1/2\n\n(define one-third (make-rat 1 3))\n(print-rat (add-rat one-half one-third)) ; 5/6\n\n(print-rat (mul-rat one-half one-third)) ; 1/6\n(print-rat (add-rat one-third one-third)) ; 6/9\n\n; Use `gcd` to reduce to lowest terms\n(define (make-rat n d)\n    (let ((g (gcd n d)))\n        (cons (/ n g) (/ d g))))\n(print-rat (add-rat one-third one-third)) ; 2/3"}}}},"pageContext":{"name":"rational.scm","expr":"master:sicp/ch2-abstraction-data/rational.scm"}}
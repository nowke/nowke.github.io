{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Evaluating a polynomial in x at a given value of x can be formulated as an \n; accumulation. We evaluate the polynomial,\n; a_nx^n + a_(n-1)x^n + ... + a_1x + a_0\n; using a well-known algorithm called Horner’s rule, which structures the \n; computation as,\n; (... (a_nx + a_(n-1))x + ... a1)x + a_0\n; In other words, we start with an, multiply by x, add a_(n−1), multiply by x, \n; and so on, until we reach a0\n; Fill in the following template to produce a procedure that evaluates a polynomial \n; using Horner’s rule. Assume that the coefficients of the polynomial are arranged \n; in a sequence, from a0 through an.\n; (define (horner-eval x coefficient-sequence) \n;   (accumulate (lambda (this-coeff higher-terms) ⟨??⟩)\n;               0\n;               coefficient-sequence))\n; For example, to compute 1 + 3x + 5x^3 + x^5 at x = 2 you would evaluate\n; (horner-eval 2 (list 1 3 0 5 0 1))\n\n(define nil '())\n(define (accumulate op initial sequence)\n    (if (null? sequence) \n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n\n(define (horner-eval x coefficient-sequence)\n    (accumulate\n        (lambda (this-coeff higher-terms) \n            (+ (* higher-terms x) this-coeff))\n        0\n        coefficient-sequence))\n(horner-eval 2 (list 1 3 0 5 0 1)) ;Value: 79"}}}},"pageContext":{"name":"2.34.scm","expr":"master:sicp/ch2-abstraction-data/2.34.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Louis Reasoner is having a terrible time doing Exercise 2.42. His queens \n; procedure seems to work, but it runs extremely slowly. (Louis never does \n; manage to wait long enough for it to solve even the 6 × 6 case.) When Louis \n; asks Eva Lu Ator for help, she points out that he has interchanged the order \n; of the nested mappings in the flatmap, writing it as\n; \n; (flatmap\n;     (lambda (new-row)\n;     (map (lambda (rest-of-queens)\n;     (adjoin-position new-row k rest-of-queens))\n;             (queen-cols (- k 1))))\n;      (enumerate-interval 1 board-size))\n;\n; Explain why this interchange makes the program run slowly. Estimate how long \n; it will take Louis’s program to solve the eight-queens puzzle, assuming that \n; the program in Exercise 2.42 solves the puzzle in time T.\n\n; Answer\n; ==============================================\n; In Louis's program, position of `queen-cols` and `enumerate-interval` is \n; exchanged. Hence for every item in `enumerate-interval`, `queen-cols` gets\n; called. Hence during every recursion, it is calculated `board-size` times\n; There is unnecessary duplication of (size^size) times\n\n; If previous program takes time T, we have (size^size) x T for Louis's program\n"}}}},"pageContext":{"name":"2.43.scm","expr":"master:sicp/ch2-abstraction-data/2.43.scm"}}
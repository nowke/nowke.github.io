{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Arriving at higher abstraction notation \"Sigma\"\n\n; (1) Compute sum from a to b\n;    a + (a + 1) + ... + (b - 1) + b\n(define (sum-integers a b) (if (> a b)\n      0\n      (+ a (sum-integers (+ a 1) b))))\n(sum-integers 1 10) ;Value: 55\n\n; (2) Sum of cubes of integer from a to b\n;    a^3 + (a+1)^3 + ... + (b-1)^3 + b^3\n(define (cube x) (* x x x))\n(define (sum-cubes a b) \n    (if (> a b)\n      0\n      (+ (cube a)\n         (sum-cubes (+ a 1) b))))\n(sum-cubes 2 4) ;Value: 99\n\n; (3) Sum of the following series (Pi-sum)\n;  (1/ (1 * 3)) + (1 / (5 * 7)) + (1 / (9 * 11)) + ... = Ï€/8\n(define (pi-sum a b)\n    (if (> a b)\n        0\n        (+ (/ 1.0 (* a (+ a 2)))\n           (pi-sum (+ a 4) b))))\n(* 8 (pi-sum 1 1000)) ;Value: 3.139592655589783\n\n; Abstracting the common pattern,\n(define (sigma term a next b)\n    (if (> a b) \n        0\n        (+ (term a)\n           (sigma term (next a) next b))))\n\n; Problem (2) can be written as,\n(define (inc n) (+ n 1))\n(define (sum-cubes a b)\n    (sigma cube a inc b))\n(sum-cubes 2 4) ;Value: 99\n\n; Problem (3) can be written as,\n(define (pi-sum a b) \n    (define (pi-term x)\n        (/ 1.0 (* x (+ x 2)))) \n    (define (pi-next x)\n        (+ x 4))\n  (sigma pi-term a pi-next b))\n(* 8 (pi-sum 1 1000)) ;Value: 3.139592655589783"}}}},"pageContext":{"name":"sigma.scm","expr":"master:sicp/ch1-abstraction-procedures/sigma.scm"}}
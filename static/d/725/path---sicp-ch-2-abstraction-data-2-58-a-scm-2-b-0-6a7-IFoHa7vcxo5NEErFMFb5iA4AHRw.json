{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; New definitions of sum and product\n; ============================================================\n(define (sum? x) \n    (and (pair? x) (eq? (cadr x) '+)))\n(define (make-sum a1 a2) \n    (cond ((=number? a1 0) a2) \n            ((=number? a2 0) a1)\n            ((and (number? a1) (number? a2)) (+ a1 a2))\n            (else (list a1 '+ a2)))) \n(define (addend s) (car s))\n(define (augend s) (caddr s))\n\n(define (product? x) \n    (and (pair? x) (eq? (cadr x) '*)))\n(define (make-product m1 m2) \n    (cond ((or (=number? m1 0) (=number? m2 0)) 0)\n            ((=number? m1 1) m2)\n            ((=number? m2 1) m1)\n            ((and (number? m1) (number? m2)) (* m1 m2))\n            (else (list m1 '* m2))))\n(define (multiplier p) (car p))\n(define (multiplicand p) (caddr p))\n; ============================================================\n\n; Testing\n(define (variable? x) (symbol? x))\n(define (same-variable? v1 v2)\n    (and (variable? v1) (variable? v2) (eq? v1 v2)))\n(define (=number? exp num) \n    (and (number? exp) (= exp num)))\n\n(define (deriv exp var)\n    (cond ((number? exp) 0)\n          ((variable? exp) (if (same-variable? exp var) 1 0))\n          ((sum? exp) (make-sum (deriv (addend exp) var)\n                                (deriv (augend exp) var)))\n          ((product? exp)\n            (make-sum\n                (make-product \n                    (multiplier exp)\n                    (deriv (multiplicand exp) var))\n                (make-product\n                    (deriv (multiplier exp) var)\n                    (multiplicand exp))))\n          (else\n            (error \"unknown expression type: DERIV\" exp))))\n\n(deriv '(x + 3) 'x)\n; Value: 1\n\n(deriv '(x * y) 'x)\n; Value: y\n\n(deriv '(x + (3 * (x + (y + 2)))) 'x)\n; Value: 4"}}}},"pageContext":{"name":"2.58.a.scm","expr":"master:sicp/ch2-abstraction-data/2.58.a.scm"}}
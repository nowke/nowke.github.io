{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Sum of squares of odd tree leaves\n(define (sum-odd-squares tree)\n    (cond ((null? tree) 0)\n          ((not (pair? tree))\n            (if (odd? tree) (square tree) 0))\n          (else (+ (sum-odd-squares (car tree))\n                   (sum-odd-squares (cdr tree))))))\n\n(sum-odd-squares \n    (list 1\n        (list 2 (list 3 4) 5)\n        (list 6 7))) ;Value: 84 (1 + 9 + 25 + 49)\n\n\n; Even fibonacci numbers\n(define (fib n)\n    (define (iter a b count)\n        (if (= count 0)\n            b\n            (iter (+ a b) a (- count 1))))\n    (iter 1 0 n))\n(define nil '())\n(define (even-fibs n)\n    (define (next k)\n        (if (> k n)\n           nil\n           (let ((f (fib k)))\n             (if (even? f)\n                 (cons f (next (+ k 1)))\n                 (next (+ k 1))))))\n    (next 0))\n(even-fibs 10) ; (0 2 8 34)\n\n; Sequence operations\n; Defining filter\n(define (fitler predicate sequence)\n    (cond ((null? sequence) nil)\n          ((predicate (car sequence))\n            (cons (car sequence)\n                  (filter predicate (cdr sequence))))\n          (else (filter predicate sequence))))\n(filter odd? (list 1 2 3 4 5 6)) ; (1 3 5)\n\n; Defining accumulation\n(define (accumulate op initial sequence)\n    (if (null? sequence) \n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n(accumulate + 0 (list 1 2 3 4)) ;Value: 10\n(accumulate * 1 (list 1 2 3 4)) ;Value: 24\n(accumulate cons nil (list 1 2 3 4 5)) ;(1 2 3 4 5)\n\n; Enumerating integers\n(define (enumarate-interval low high)\n    (if (> low high)\n        nil\n        (cons low (enumarate-interval (+ low 1) high))))\n(enumarate-interval 2 7) ; (2 3 4 5 6 7)\n\n; Enumerating tree\n(define (enumerate-tree tree)\n    (cond ((null? tree) nil)\n          ((not (pair? tree)) (list tree))\n          (else (append (enumerate-tree (car tree))\n                        (enumerate-tree (cdr tree))))))\n(enumerate-tree (list 1 (list 2 (list 3 4)) 5)) ; (1 2 3 4 5)\n\n; Rewriting `sum-odd-squares`\n(define (sum-odd-squares tree)\n    (accumulate\n        +\n        0\n        (map square (filter odd? (enumerate-tree tree)))))\n(sum-odd-squares \n    (list 1\n        (list 2 (list 3 4) 5)\n        (list 6 7))) ;Value: 84\n\n; Rewriting `even-fibs`\n(define (even-fibs k)\n    (accumulate\n      cons\n      nil\n      (filter even? (map fib (enumarate-interval 0 k)))))\n(even-fibs 10) ; (0 2 8 34)\n\n(define (list-fib-squares n)\n    (accumulate\n        cons\n        nil\n        (map square (map fib (enumarate-interval 0 n)))))\n(list-fib-squares 10) ; (0 1 1 4 9 25 64 169 441 1156 3025)"}}}},"pageContext":{"name":"conventional-interface.scm","expr":"master:sicp/ch2-abstraction-data/conventional-interface.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The following procedure takes as its argument a list of symbol-frequency pairs \n; (where no symbol appears in more than one pair) and generates a Huffman encoding \n; tree according to the Huffman algorithm.\n(define (generate-huffman-tree pairs) \n    (successive-merge (make-leaf-set pairs)))\n; `make-leaf-set` is the procedure given above that transforms the list of pairs \n; into an ordered set of leaves. `successive-merge` is the procedure you must write, \n; using `make-code-tree` to successively merge the smallest-weight elements of the \n; set until there is only one element left, which is the desired Huffman tree. (This \n; procedure is slightly tricky, but not really complicated. If you find yourself \n; designing a complex procedure, then you are almost certainly doing something wrong. \n; You can take significant advantage of the fact that we are using an ordered set \n; representation.)\n\n; helpers\n(define (make-leaf symbol weight) (list 'leaf symbol weight))\n(define (leaf? object) (eq? (car object) 'leaf))\n(define (symbol-leaf x) (cadr x))\n(define (weight-leaf x) (caddr x))\n\n(define (make-code-tree left right)\n    (list left\n          right\n          (append (symbols left) (symbols right))\n          (+ (weight left) (weight right))))\n(define (left-branch tree) (car tree))\n(define (right-branch tree) (cadr tree))\n(define (symbols tree)\n    (if (leaf? tree)\n        (list (symbol-leaf tree))\n        (caddr tree)))\n(define (weight tree)\n    (if (leaf? tree)\n        (weight-leaf tree)\n        (cadddr tree)))\n(define (decode bits tree)\n    (define (decode-1 bits current-branch)\n        (if (null? bits)\n            '()\n            (let ((next-branch\n                    (choose-branch (car bits) current-branch)))\n                (if (leaf? next-branch)\n                    (cons (symbol-leaf next-branch)\n                          (decode-1 (cdr bits) tree))\n                    (decode-1 (cdr bits) next-branch)))))\n    (decode-1 bits tree))\n(define (choose-branch bit branch)\n    (cond ((= bit 0) (left-branch branch))\n          ((= bit 1) (right-branch branch))\n          (else (error \"bad bit: CHOOSE-BRANCH\" bit))))\n(define (adjoin-set x set)\n    (cond ((null? set) (list x))\n          ((< (weight x) (weight (car set))) (cons x set))\n          (else (cons (car set) (adjoin-set x (cdr set))))))\n(define (make-leaf-set pairs)\n    (if (null? pairs)\n        '()\n        (let ((pair (car pairs)))\n            (adjoin-set (make-leaf (car pair)       ; symbol\n                                   (cadr pair))     ; frequency\n                        (make-leaf-set (cdr pairs))))))\n\n; Successive merge procedure\n(define (successive-merge leaf-set)\n    (if (null? (cdr leaf-set))\n        (car leaf-set)\n        (successive-merge\n            (adjoin-set\n                (make-code-tree (car leaf-set) (cadr leaf-set))\n                (cddr leaf-set)))))\n\n; Testing\n(generate-huffman-tree '((A 4) (B 2) (C 1) (D 1)))\n; ((leaf a 4) ((leaf b 2) ((leaf d 1) (leaf c 1) (d c) 2) (b d c) 4) (a b d c) 8)\n\n(generate-huffman-tree '((A 3) (B 5) (C 8) (D 8)))\n; (((leaf a 3) (leaf b 5) (a b) 8) ((leaf d 8) (leaf c 8) (d c) 16) (a b d c) 24)\n"}}}},"pageContext":{"name":"2.69.scm","expr":"master:sicp/ch2-abstraction-data/2.69.scm"}}
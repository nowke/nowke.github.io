{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Define a generic predicate `=zero?` that tests if its argument is zero, and \n; install it in the generic arithmetic package. This operation should work for \n; ordinary numbers, rational numbers, and complex numbers.\n\n(load \"arithmetic-package.scm\")\n\n(define (=zero? x) (apply-generic '=zero? x)) \n\n; Define `=zero?` in each package\n(put '=zero? 'scheme-number (lambda (x) (= x 0)))\n(put '=zero? 'rational_ (lambda (x) (= (numer x) 0)))\n(put '=zero? 'complex (lambda (z) (= (real-part z) (imag-part z) 0)))\n\n; Testing\n(=zero? (make-scheme-number 0)) ;#t\n(=zero? (make-rational 0 10)) ;#t\n(=zero? (make-rational 1 10)) ;#f\n(=zero? (make-complex-from-real-imag 0 0)) ;#t\n(=zero? (make-complex-from-real-imag 0 1)) ;#f"}}}},"pageContext":{"name":"2.80.scm","expr":"master:sicp/ch2-abstraction-data/2.80.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Alyssa P. Hacker doesn’t see why if needs to be \n; provided as a special form. “Why can’t I just \n; define it as an ordinary procedure in terms of cond?” \n; she asks. Alyssa’s friend Eva Lu Ator claims this \n; can indeed be done, and she defines a new version of if:\n(define (new-if predicate then-clause else-clause) \n    (cond (predicate then-clause)\n        (else else-clause)\n    )\n)\n(new-if (= 2 3) 0 5) ; 5\n(new-if (= 1 1) 0 5) ; 0\n; Delighted, Alyssa uses new-if to rewrite the \n; square-root program:\n(define (average x y) (/ (+ x y) 2))\n(define (square x) (* x x))\n\n(define (improve guess x) (average guess (/ x guess)))\n(define (good-enough? guess x)\n  (< (abs (- (square guess) x)) 0.001)\n)\n\n(define (sqrt-iter guess x) \n  (new-if (good-enough? guess x)\n    guess\n    (sqrt-iter (improve guess x) x)\n  )\n)\n\n(define (sqrt x)\n  (sqrt-iter 1.0 x)\n)\n; What happens when Alyssa attempts to use this \n; to compute square roots? Explain\n\n; Answer:\n; Since the condition is inside a \"function\" `new-if`,\n; inside `sqrt-iter`, the \"else-clause\" will be evaluated.\n; This will lead to infinite recursion scenario.\n; Note: This will continue until stack overflow"}}}},"pageContext":{"name":"1.06.scm","expr":"master:sicp/ch1-abstraction-procedures/1.06.scm"}}
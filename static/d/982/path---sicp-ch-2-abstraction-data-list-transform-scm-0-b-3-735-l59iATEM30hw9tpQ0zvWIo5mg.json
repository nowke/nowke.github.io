{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Apply scaling operation\n(define (scale-list items factor)\n    (if (null? items)\n        items\n        (cons (* (car items) factor)\n              (scale-list (cdr items) factor))))\n\n(scale-list (list 1 2 3 4 5) 10) ; (10 20 30 40 50)\n\n; Abstracting the higher level idea `map`\n(define (map proc items)\n    (if (null? items)\n        items\n        (cons (proc (car items))\n              (map proc (cdr items)))))\n\n(map abs (list -10 2.5 -11.6 17)) ; (10 2.5 11.6 17)\n(map square (list 4 5 6 10)) ; (16 25 36 100)\n(map (lambda (x) (+ x 1)) (list 1 4 7 9)) ; (2 5 8 10)\n\n; scale-list in terms of map\n(define (scale-list items factor)\n    (map (lambda (x) (* x factor)) items))\n    \n(scale-list (list 1 2 3 4 5) 5) ; (5 10 15 20 25)"}}}},"pageContext":{"name":"list-transform.scm","expr":"master:sicp/ch2-abstraction-data/list-transform.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Show how to generalize `apply-generic` to handle coercion in the general case of\n; multiple arguments. One strategy is to attempt to coerce all the arguments to \n; the type of the first argument, then to the type of the second argument, and so \n; on. Give an example of a situation where this strategy (and likewise the \n; two-argument version given above) is not sufficiently general. (Hint: Consider \n; the case where there are some suitable mixed-type operations present in the table \n; that will not be tried.)\n\n; Source: [https://wizardbook.wordpress.com/2010/12/08/exercise-2-82/](https://wizardbook.wordpress.com/2010/12/08/exercise-2-82/)\n\n(define (apply-generic op . args)\n   \n  (define (all-coercable? coerce-procs)\n    (not (member #f coerce-procs)))\n   \n  (define (coerce-args coercion-procs args)\n    (map (lambda (coerce-proc arg) \n           (coerce-proc arg))\n         coercion-procs\n         args))\n   \n  ; attempt to coerce all args into a common type among the args\n  (define (apply-with-coercion arg-types)\n     \n    ; attempt to coerce all args using each tag-type in turn\n    ; it's a scoped procedure to keep the original arguments (arg-types) for error reporting\n    (define (coerce-types tags)\n      (if (null? tags)   ; all targets exhausted \n          (error \"No method for these types - APPLY-GENERIC\"\n                 (list op arg-types))\n          (let* ((target-type (car tags))\n                 (arg-coercions (map        ; get all the coercion procedures from the target \n                                 (lambda (coerce-from) \n                                   (if (eq? coerce-from target-type)\n                                       identity\n                                       (get-coercion coerce-from target-type)))\n                                 arg-types))) \n            (if (all-coercable? arg-coercions) \n                ; the target type is valid if all the args can be coerced \n                (apply apply-generic  \n                       op \n                       (coerce-args arg-coercions args))\n                ; target-type is not valid, so try the next one in the list\n                (coerce-types (cdr tags))))))        ; try the next target type\n     \n    (coerce-types arg-types))\n   \n  (let* ((type-tags (map type-tag args))\n         (proc (get op type-tags)))\n    (if proc \n        (apply proc (map contents args))\n        (apply-with-coercion type-tags))))"}}}},"pageContext":{"name":"2.82.scm","expr":"master:sicp/ch2-abstraction-data/2.82.scm"}}
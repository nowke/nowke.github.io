{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The `encode` procedure takes as arguments a message and a tree and produces \n; the list of bits that gives the encoded message.\n(define (encode message tree) \n    (if (null? message)\n        '()\n        (append (encode-symbol (car message) tree)\n                (encode (cdr message) tree))))\n; `encode-symbol` is a procedure, which you must write, that returns the list \n; of bits that encodes a given symbol according to a given tree. You should \n; design `encode-symbol` so that it signals an error if the symbol is not in \n; the tree at all. Test your procedure by encoding the result you obtained in \n; Exercise 2.67 with the sample tree and seeing whether it is the same as the \n; original sample message.\n\n; Helpers\n(define (make-leaf symbol weight) (list 'leaf symbol weight))\n(define (leaf? object) (eq? (car object) 'leaf))\n(define (symbol-leaf x) (cadr x))\n(define (weight-leaf x) (caddr x))\n\n(define (make-code-tree left right)\n    (list left\n          right\n          (append (symbols left) (symbols right))\n          (+ (weight left) (weight right))))\n(define (left-branch tree) (car tree))\n(define (right-branch tree) (cadr tree))\n(define (symbols tree)\n    (if (leaf? tree)\n        (list (symbol-leaf tree))\n        (caddr tree)))\n(define (weight tree)\n    (if (leaf? tree)\n        (weight-leaf tree)\n        (cadddr tree)))\n(define (decode bits tree)\n    (define (decode-1 bits current-branch)\n        (if (null? bits)\n            '()\n            (let ((next-branch\n                    (choose-branch (car bits) current-branch)))\n                (if (leaf? next-branch)\n                    (cons (symbol-leaf next-branch)\n                          (decode-1 (cdr bits) tree))\n                    (decode-1 (cdr bits) next-branch)))))\n    (decode-1 bits tree))\n(define (choose-branch bit branch)\n    (cond ((= bit 0) (left-branch branch))\n          ((= bit 1) (right-branch branch))\n          (else (error \"bad bit: CHOOSE-BRANCH\" bit))))\n(define (adjoin-set x set)\n    (cond ((null? set) (list x))\n          ((< (weight x) (weight (car set))) (cons x set))\n          (else (cons (car set) (adjoin-set x (cdr set))))))\n(define (make-leaf-set pairs)\n    (if (null? pairs)\n        '()\n        (let ((pair (car pairs)))\n            (adjoin-set (make-leaf (car pair)       ; symbol\n                                   (cadr pair))     ; frequency\n                        (make-leaf-set (cdr pairs))))))\n(define (element-of-set? x set) \n    (cond ((null? set) false) \n            ((equal? x (car set)) true) \n            (else (element-of-set? x (cdr set))))) \n\n; Encode-symbol procedure \n(define (encode-symbol symbol tree)\n    (cond \n        ((leaf? tree) '())\n        ((element-of-set? symbol (symbols tree))\n            (let ((left  (left-branch tree))\n                  (right (right-branch tree)))\n                (if (element-of-set? symbol (symbols left))\n                    (cons 0 (encode-symbol symbol left))\n                    (cons 1 (encode-symbol symbol right)))))\n        (else (error \"Bad symbol\" symbol))))\n\n; Testing\n(define sample-tree \n    (make-code-tree (make-leaf 'A 4)\n                    (make-code-tree\n                        (make-leaf 'B 2)\n                        (make-code-tree\n                            (make-leaf 'D 1)\n                            (make-leaf 'C 1)))))\n(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))\n(define decoded-message (decode sample-message sample-tree))\n\n(encode decoded-message sample-tree)\n; (0 1 1 0 0 1 0 1 0 1 1 1 0)"}}}},"pageContext":{"name":"2.68.scm","expr":"master:sicp/ch2-abstraction-data/2.68.scm"}}
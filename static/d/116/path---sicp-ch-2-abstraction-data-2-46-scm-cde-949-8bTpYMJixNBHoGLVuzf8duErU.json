{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; A two-dimensional vector v running from the origin to a point can be represented \n; as a pair consisting of an x-coordinate and a y-coordinate. Implement a data \n; abstraction for vectors by giving a constructor make-vect and corresponding \n; selectors xcor-vect and ycor-vect. In terms of your selectors and constructor, \n; implement procedures add-vect, sub-vect, and scale-vect that perform the \n; operations vector addition, vector subtraction, and multiplying a vector by a \n; scalar:\n; (x1,y1)+(x2,y2)=(x1 +x2,y1 +y2), \n; (x1,y1)−(x2,y2)=(x1 −x2,y1 −y2),\n; s · (x , y) = (sx , sy).\n\n(define (make-vect x y) (cons x y))\n(define (xcor-vect v) (car v))\n(define (ycor-vect v) (cdr v))\n\n; Vector operaitons\n(define (add-vect v1 v2)\n    (make-vect \n        (+ (xcor-vect v1) (xcor-vect v2))\n        (+ (ycor-vect v1) (ycor-vect v2))))\n(define (sub-vect v1 v2)\n    (make-vect \n        (- (xcor-vect v1) (xcor-vect v2))\n        (- (ycor-vect v1) (ycor-vect v2))))\n(define (scale-vect s vect)\n    (make-vect (* s (xcor-vect vect)) \n               (* s (ycor-vect vect))))\n\n; Testing\n(add-vect (make-vect 1 3) (make-vect 2 8)) ;(3 . 11)\n(sub-vect (make-vect 2 5) (make-vect 0 3)) ;(2 . 2)\n(scale-vect 4 (make-vect 3 5)) ;(12 . 20)"}}}},"pageContext":{"name":"2.46.scm","expr":"master:sicp/ch2-abstraction-data/2.46.scm"}}
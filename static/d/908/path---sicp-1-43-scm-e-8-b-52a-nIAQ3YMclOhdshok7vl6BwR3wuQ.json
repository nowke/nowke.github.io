{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; If f is a numerical function and n is a positive integer, \n; then we can form the nth repeated application of f , \n; which is defined to be the function whose value at \n; x is f(f(...(f(x))...)). For example, if f is the function \n; x 􏰕→ x + 1, then the nth repeated application of f is the \n; function x 􏰕→ x + n. If f is the operation of squaring a \n; number, then the nth repeated application of f is the \n; function that raises its argument to the 2^n-th power. \n; Write a procedure that takes as inputs a procedure that \n; computes f and a positive integer n and returns the \n; procedure that computes the nth repeated application of f. \n; Your procedure should be able to be used as follows:\n; ((repeated square 2) 5) \n; 625\n; Hint: You may find it convenient to use compose from Exercise 1.42.\n\n(define (compose f g)\n    (lambda (x) (f (g x))))\n\n(define (repeated f n)\n    (if (= n 1) (lambda (x) (f x))\n        (compose f (repeated f (- n 1))))\n)\n\n((repeated square 2) 5) ;Value: 625"}}}},"pageContext":{"name":"1.43.scm","expr":"master:sicp/ch1-abstraction-procedures/1.43.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; right-split and up-split can be expressed as instances of a general splitting operation. Define a procedure\n; split with the property that evaluating\n; (define right-split (split beside below))\n; (define up-split (split below beside))\n; produces procedures right-split and up-split with the same behaviors as the ones already defined.\n#lang racket\n(require (planet \"sicp.ss\" (\"soegaard\" \"sicp.plt\" 2 1)))\n(define wave einstein) ; Make compatible with the text book\n\n(define (split s1 s2)\n  (define (splitter painter n)\n    (if (= n 0)\n        painter\n        (let ((smaller (splitter painter (- n 1))))\n          (s1 painter (s2 smaller smaller)))))\n  (lambda (painter n) (splitter painter n)))\n\n(define right-split (split beside below))\n(define up-split (split below beside))\n\n(define rs3 (right-split wave 3))\n(display \"Right split\\n\")\n(paint rs3)\n\n(define us3 (up-split wave 3))\n(display \"\\nUp split\\n\")\n(paint us3)"}}}},"pageContext":{"name":"2.45.rkt","expr":"master:sicp/ch2-abstraction-data/2.45.rkt"}}
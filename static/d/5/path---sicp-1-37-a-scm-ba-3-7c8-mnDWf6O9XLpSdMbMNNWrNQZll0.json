{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; An infinite continued fraction is an expression of the form\n; f =        N1\n;     -----------------\n;     D1 +     N2\n;          -------------\n;          D2 +   N3\n;               --------\n;               D3 + ...\n; As an example, one can show that the infinite continued \n; fraction expansion with the Ni and the Di all equal to 1 produces \n; 1/φ, where φ is the golden ratio (described in Section 1.2.2). \n; One way to approximate an infinite continued fraction is to \n; truncate the expansion after a given number of terms. Such a \n; truncation — a so-called k-term finite continued fraction — has the form\n;       N1\n; ---------------\n; D1 +   N2\n;      ---------\n;       ... + Nk/Dk\n;\n; Suppose that n and d are procedures of one argument (the term index i) \n; that return the Ni and Di of the terms of the continued fraction. \n; Define a procedure cont-frac such that evaluating (cont-frac n d k) \n; computes the value of the k-term finite continued fraction. Check \n; your procedure by approximating 1/φ usng\n; (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) k)\n; for successive values of k. How large must you make k in order to get \n; an approximation that is accurate to 4 decimal places?\n\n(define (cont-frac n d k)\n    (if (= k 0) \n        0\n        (/ (n 1)\n           (+ (d 1)\n              (cont-frac (lambda (x) (n (+ x 1)))\n                         (lambda (x) (n (+ x 1)))\n                         (- k 1))))))\n\n; 1/φ = 0.6180339887\n; At around k = 12, we get value accurate to 4 decimal placess\n(cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 12) ; Value: .6180257510729613\n"}}}},"pageContext":{"name":"1.37.a.scm","expr":"master:sicp/ch1-abstraction-procedures/1.37.a.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Write a procedure to find all ordered triples of distinct positive integers \n; i, j, and k less than or equal to a given integer n that sum to a given \n; integer s.\n\n; Define helpers\n(define nil '())\n(define (enumarate-interval low high)\n    (if (> low high)\n        nil\n        (cons low (enumarate-interval (+ low 1) high))))\n(define (accumulate op initial sequence)\n    (if (null? sequence) \n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n(define (flatmap proc seq)\n    (accumulate append nil (map proc seq)))\n\n; Construct `triplets-of-sum`\n(define (triplets-of-sum n s)\n    (define enumerate-n (enumarate-interval 1 n))\n    (filter \n        (lambda (x) (= (accumulate + 0 x) s))\n        (flatmap\n            (lambda (i)\n                (flatmap\n                    (lambda (j)\n                        (map\n                            (lambda (k) (list i j k))\n                            (enumarate-interval 1 (- j 1))))\n                    (enumarate-interval 1 (- i 1))))\n            enumerate-n)))\n\n(triplets-of-sum 6 8) ;((4 3 1) (5 2 1))\n(triplets-of-sum 6 9) ;((4 3 2) (5 3 1) (6 2 1))"}}}},"pageContext":{"name":"2.41.scm","expr":"master:sicp/ch2-abstraction-data/2.41.scm"}}
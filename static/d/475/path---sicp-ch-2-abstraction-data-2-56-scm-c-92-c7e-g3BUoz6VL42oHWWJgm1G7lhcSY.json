{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Show how to extend the basic differentiator to handle more kinds of expressions. \n; For instance, implement the differentiation rule\n; d/dx(u^n) = n u^(n-1) d/dx(u)\n; by adding a new clause to the deriv program and defining appropriate procedures \n; `exponentiation?`, `base`, `exponent`, and `make-exponentiation`. (You may use \n; the symbol ** to denote exponentiation.) Build in the rules that anything raised \n; to the power 0 is 1 and anything raised to the power 1 is the thing itself.\n\n(define (=number? exp num) (and (number? exp) (= exp num)))\n\n; Define exponent related prodecures\n(define (exponentiation? x)\n    (and (pair? x) (eq? (car x) '**)))\n\n(define (make-exponent b e)\n    (cond ((=number? e 0) 1)\n          ((=number? e 1) b)\n          ((and (number? b) (number? e)) (expt b e))\n          (else (list '** b e))))\n(define (base e) (cadr e))\n(define (exponent e) (caddr e))\n\n(make-exponent 2 5) ;Value: 32\n(make-exponent 'x 0) ;Value: 1\n(make-exponent 'y 1) ;y\n(make-exponent 'x 'y) ;(** x y)\n(make-exponent 2 'x) ;(** 2 x)\n\n; Modify `deriv` to support exponentiation\n(define (deriv exp var)\n    (cond ((number? exp) 0)\n          ((variable? exp) (if (same-variable? exp var) 1 0))\n          ((sum? exp) (make-sum (deriv (addend exp) var)\n                                (deriv (augend exp) var)))\n          ((product? exp)\n            (make-sum\n                (make-product \n                    (multiplier exp)\n                    (deriv (multiplicand exp) var))\n                (make-product\n                    (deriv (multiplier exp) var)\n                    (multiplicand exp))))\n          ((exponentiation? exp)\n            (make-product\n                (exponent exp)\n                (make-product\n                    (make-exponent \n                        (base exp)\n                        (make-sum (exponent exp) -1))\n                    (deriv (base exp) var))))\n          (else\n            (error \"unknown expression type: DERIV\" exp))))\n\n(define (variable? x) (symbol? x))\n(define (same-variable? v1 v2)\n    (and (variable? v1) (variable? v2) (eq? v1 v2)))\n(define (sum? x) (and (pair? x) (eq? (car x) '+)))\n(define (addend s) (cadr s))\n(define (augend s) (caddr s))\n(define (product? x) (and (pair? x) (eq? (car x) '*)))\n(define (multiplier p) (cadr p))\n(define (multiplicand p) (caddr p))\n(define (make-sum a1 a2) \n    (cond ((=number? a1 0) a2) \n          ((=number? a2 0) a1)\n          ((and (number? a1) (number? a2)) (+ a1 a2))\n          (else (list '+ a1 a2))))\n(define (make-product m1 m2) \n    (cond ((or (=number? m1 0) (=number? m2 0)) 0)\n            ((=number? m1 1) m2)\n            ((=number? m2 1) m1)\n            ((and (number? m1) (number? m2)) (* m1 m2))\n            (else (list '* m1 m2))))\n\n(deriv '(** x 3) 'x)\n; (* 3 (** x 2))\n\n(deriv '(** x n) 'x)\n; (* n (** x (+ n -1)))"}}}},"pageContext":{"name":"2.56.scm","expr":"master:sicp/ch2-abstraction-data/2.56.scm"}}
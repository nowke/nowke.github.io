{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The following procedure list->tree converts an ordered list to a balanced \n; binary tree. The helper procedure partial-tree takes as arguments an integer \n; n and list of at least n elements and constructs a balanced tree containing \n; the first n elements of the list. The result returned by partial-tree is a \n; pair (formed with cons) whose car is the constructed tree and whose cdr is \n; the list of elements not included in the tree.\n(define (list->tree elements)\n    (car (partial-tree elements (length elements))))\n\n(define (partial-tree elts n)\n  (if (= n 0)\n      (cons '() elts)\n      (let ((left-size (quotient (- n 1) 2)))\n        (let ((left-result\n                (partial-tree elts left-size)))\n          (let ((left-tree (car left-result)) \n                (non-left-elts (cdr left-result))\n                (right-size (- n (+ left-size 1))))\n            (let ((this-entry (car non-left-elts)) \n                  (right-result\n                    (partial-tree\n                      (cdr non-left-elts)\n                      right-size)))\n                (let ((right-tree (car right-result)) \n                      (remaining-elts\n                        (cdr right-result)))\n                    (cons (make-tree this-entry\n                                     left-tree\n                                     right-tree)\n                          remaining-elts))))))))\n\n; (a) Write a short paragraph explaining as clearly as you can how partial-tree \n;     works. Draw the tree produced by list->tree for the list (1 3 5 7 9 11).\n\n; Procedure `partial-tree` will construct a tree of `elts`, where root is the middle\n; element (median) and left-subtree is `partial-tree` of elements less than middle\n; element (this-entry) and right-substree is `partial-tree` of elements greater than\n; `this-entry`\n; For (1 3 5 7 9 11), it constructs the following tree\n;       5\n;    /     \\\n;  1         9\n;   \\      /   \\\n;     3   7     11\n\n; (b) What is the order of growth in the number of steps required by list->tree to \n;     convert a list of n elements?\n\n; T(n) = 2T(n/2) + O(1)\n; T(n) = O(n)\n\n \n"}}}},"pageContext":{"name":"2.64.scm","expr":"master:sicp/ch2-abstraction-data/2.64.scm"}}
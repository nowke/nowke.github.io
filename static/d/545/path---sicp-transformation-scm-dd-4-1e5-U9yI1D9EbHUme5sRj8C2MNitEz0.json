{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Derivate of a function\n(define (deriv g)\n    (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))\n(define dx 0.00001)\n\n; Evaluate derivative of x^3 -> 3x^2\n; i.e. x -> x^3 at x=5 is 75\n(define (cube x) (* x x x))\n((deriv cube) 5) ;Value: 75.00014999664018\n\n; Newton's method as fixed point process,\n; f(x) = x - g(x)/Dg(x)\n(define tolerance 0.00001)\n(define (fixed-point f first-guess)\n    (define (close-enough? v1 v2)\n        (< (abs (- v1 v2)) tolerance))\n    (define (try guess)\n        (let ((next (f guess)))\n            (if (close-enough? guess next)\n                next\n                (try next))))\n    (try first-guess))\n(define (newton-transform g)\n    (lambda (x) (- x (/ (g x) ((deriv g) x)))))\n\n(define (newtons-method g guess) (fixed-point (newton-transform g) guess))\n\n; Finding square root\n; y -> y^2 - x \n(define (newton-sqrt x)\n    (newtons-method (lambda (y) (- (square y) x)) 1.0))\n\n(newton-sqrt 26) ;Value: 5.099019513592785\n\n; Abstractions and first-class procedures\n(define (fixed-point-of-transform g transform guess) \n    (fixed-point (transform g) guess))\n\n; Square root v1 (using average damp y->x/y)\n(define (average-damp f)\n    (lambda (x) ((lambda (a b) (/ (+ a b) 2)) x (f x))))\n(define (sqrt-v1 x)\n    (fixed-point-of-transform\n        (lambda (y) (/ x y)) average-damp 1.0))\n(sqrt-v1 28) ;Value: 5.291502622129181\n\n; Square root v2 (using Newton's transform)\n(define (sqrt-v2 x) (fixed-point-of-transform\n            (lambda (y) (- (square y) x)) newton-transform 1.0))\n(sqrt-v2 28) ;Value: 5.291502622129181"}}}},"pageContext":{"name":"transformation.scm","expr":"master:sicp/ch1-abstraction-procedures/transformation.scm"}}
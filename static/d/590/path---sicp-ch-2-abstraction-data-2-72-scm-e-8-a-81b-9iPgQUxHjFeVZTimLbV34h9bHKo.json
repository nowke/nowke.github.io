{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Consider the encoding procedure that you designed in Exercise 2.68. What is the \n; order of growth in the number of steps needed to encode a symbol? Be sure to \n; include the number of steps needed to search the symbol list at each node \n; encountered. To answer this question in general is difficult. Consider the \n; special case where the relative frequencies of the n symbols are as described \n; in Exercise 2.71, and give the order of growth (as a function of n) of the number \n; of steps needed to encode the most frequent and least frequent symbols in the \n; alphabet.\n\n; ==================================================================\n; Source: http://community.schemewiki.org/?sicp-ex-2.72\n; ==================================================================\n\n; For the encode-symbol procedure in 2.68:\n\n; Search the symbol list at each node: O(n) time\n; Then take log_n branches\n; Total: O(n * log_n)\n; For the special case described in 2.71:\n\n; 1. Encoding the most frequent symbol:\n\n; Search through symbol list: O(n) time\n; Take the first single branch, since it will be at the top of the list: constant\n; Total: O(n)\n; 2. Encoding the least frequent symbol:\n\n; Search through symbol list at each level: O(n) time\n; Take the next branch, since we are only removing one node, it would be: O(n - 1)\n; Total: O(n * (n - 1)), or O(n^2)"}}}},"pageContext":{"name":"2.72.scm","expr":"master:sicp/ch2-abstraction-data/2.72.scm"}}
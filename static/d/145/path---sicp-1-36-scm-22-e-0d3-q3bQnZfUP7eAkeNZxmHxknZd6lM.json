{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Modify `fixed-point` so that it prints the sequence \n; of approximations it generates, using the newline and \n; display primitives shown in Exercise 1.22. Then find \n; a solution to x^x = 1000 by finding a fixed point of \n; x 􏰕→ log(1000)/ log(x). (Use Scheme’s primitive log \n; procedure, which computes natural logarithms.) Compare \n; the number of steps this takes with and without average \n; damping. (Note that you cannot start fixed-point with \n; a guess of 1, as this would cause division by log(1) = 0.)\n\n; Answer\n; -------------------------\n; (i) Modified `fixed-point` procedure\n(define tolerance 0.00001)\n(define (average a b) (/ (+ a b) 2))\n(define (fixed-point f first-guess)\n    (define (close-enough? v1 v2)\n        (< (abs (- v1 v2)) tolerance))\n    (define (try guess)\n        (newline)\n        (display \"Guess: \")\n        (display guess)\n        (let ((next (f guess)))\n            (if (close-enough? guess next)\n                next\n                (try next))))\n    (try first-guess))\n\n; (ii) Solution to x^x = 1000 (without avg)\n(fixed-point (lambda (x) (/ (log 1000) (log x))) 2.5) ;Value: 4.555539169119903\n\n; (iii) Solution to x^x = 1000 (with avg)\n(fixed-point (lambda (x) (average x\n                                  (/ (log 1000) (log x))))\n             2.5)\n\n; Comparison\n; -----------------\n; Without average => 33 steps\n; With average    =>  9 steps"}}}},"pageContext":{"name":"1.36.scm","expr":"master:sicp/ch1-abstraction-procedures/1.36.scm"}}
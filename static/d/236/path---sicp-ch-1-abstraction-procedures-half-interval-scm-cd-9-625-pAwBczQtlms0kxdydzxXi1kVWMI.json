{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Half-interval method for finding roots of\n; f(x) = 0\n(define (average a b) (/ (+ a b) 2))\n(define (search f neg-point pos-point)\n    (let ((midpoint (average neg-point pos-point)))\n        (if (close-enough? neg-point pos-point)\n            midpoint\n            (let ((test-value (f midpoint)))\n                (cond ((positive? test-value)\n                       (search f neg-point midpoint))\n                      ((negative? test-value)\n                       (search f midpoint pos-point))\n                      (else midpoint))))))\n\n(define (close-enough? x y) (< (abs (- x y)) 0.001))\n; This will give wrong answer if we directly supply points\n; at which f(x) do not have requried sign\n\n; A better wrapper method\n(define (half-interval-method f a b)\n    (let ((a-value (f a))\n          (b-value (f b)))\n        (cond ((and (negative? a-value) (positive? b-value))\n               (search f a b))\n              ((and (positive? a-value) (negative? b-value))\n               (search f b a))\n              (else \n                (error \"Values are not of opposite sign\" a b)))))\n\n\n(half-interval-method sin 2.0 4.0) ;Value: 3.14111328125\n\n(half-interval-method (lambda (x) (- (* x x x) (* 2 x) 3)) \n                      1.0\n                      2.0) ;Value: 1.89306640625\n"}}}},"pageContext":{"name":"half-interval.scm","expr":"master:sicp/ch1-abstraction-procedures/half-interval.scm"}}
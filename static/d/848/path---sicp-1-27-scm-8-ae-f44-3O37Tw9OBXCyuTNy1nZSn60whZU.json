{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Demonstrate that the Carmichael numbers listed in \n; Footnote 1.47 really do fool the Fermat test. That is, \n; write a procedure that takes an integer n and tests \n; whether an is congruent to a modulo n for every a < n, \n; and try your procedure on the given Carmichael numbers.\n\n(define (even? x) (= (remainder x 2) 0))\n(define (expmod base exp m)\n    (cond ((= exp 0) 1)\n          ((even? exp)\n           (remainder\n            (square (expmod base (/ exp 2) m))\n             m)) \n          (else\n            (remainder\n             (* base (expmod base (- exp 1) m))\n             m))))\n\n(define (fermat-test-all n)\n    (define (fermat-test-all-iter a)\n        (if (= a n) #t\n            (if (= (expmod a n n) a) (fermat-test-all-iter (+ a 1)) #f)))\n    (fermat-test-all-iter 1)\n)\n\n; Testing with actual prime numbers\n(fermat-test-all 2) ;Value: #t\n(fermat-test-all 17) ;Value: #t\n\n; Testing with Carmichael numbers (should be false, but returns true)\n(fermat-test-all 561)\n(fermat-test-all 1105)\n(fermat-test-all 1729)\n(fermat-test-all 2465)\n(fermat-test-all 2821)\n(fermat-test-all 6601)\n"}}}},"pageContext":{"name":"1.27.scm","expr":"master:sicp/ch1-abstraction-procedures/1.27.scm"}}
{"data":{"markdownRemark":{"html":"<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scheme line-numbers\"><code class=\"language-scheme\"><span class=\"token comment\">; Insatiable Enterprises, Inc., is a highly decentralized conglomerate company </span>\n<span class=\"token comment\">; consisting of a large number of independent divisions located all over the world. </span>\n<span class=\"token comment\">; The company’s computer facilities have just been interconnected by means of a</span>\n<span class=\"token comment\">; clever network-interfacing scheme that makes the entire network appear to any user</span>\n<span class=\"token comment\">; to be a single computer. Insatiable’s president, in her first attempt to exploit </span>\n<span class=\"token comment\">; the ability of the network to extract administrative information from division </span>\n<span class=\"token comment\">; files, is dismayed to discover that, although all the division files have been </span>\n<span class=\"token comment\">; implemented as data structures in Scheme, the particular data structure used </span>\n<span class=\"token comment\">; varies from division to division. A meeting of division managers is hastily called </span>\n<span class=\"token comment\">; to search for a strategy to integrate the files that will satisfy headquarters’ </span>\n<span class=\"token comment\">; needs while preserving the existing autonomy of the divisions.</span>\n\n<span class=\"token comment\">; Show how such a strategy can be implemented with data- directed programming. As an</span>\n<span class=\"token comment\">; example, suppose that each division’s personnel records consist of a single file, </span>\n<span class=\"token comment\">; which contains a set of records keyed on employees’ names. The structure of the set</span>\n<span class=\"token comment\">; varies from division to division. Furthermore, each employee’s record is itself a </span>\n<span class=\"token comment\">; set (structured differently from division to division) that contains information </span>\n<span class=\"token comment\">; keyed under identifiers such as address and salary. In particular:</span>\n\n<span class=\"token comment\">; (a) Implement for headquarters a `get-record` procedure that retrieves a specified </span>\n<span class=\"token comment\">;     employee’s record from a specified personnel file. The procedure should be </span>\n<span class=\"token comment\">;     applicable to any division’s file. Explain how the individual divisions’ files </span>\n<span class=\"token comment\">;     should be structured. In particular, what type information must be supplied?</span>\n\n<span class=\"token comment\">; Ans:</span>\n<span class=\"token comment\">; Headquarter should have the following structure with division name and file</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">make-hq-file</span> division file<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> division file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-division</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-file</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; `get-record` method</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-record</span> name file<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span> <span class=\"token string\">'get-record</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-division</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n        name <span class=\"token punctuation\">(</span><span class=\"token function\">get-file</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; (b) Implement for headquarters a `get-salary` procedure that returns the salary</span>\n<span class=\"token comment\">;     information from a given employee’s record from any division’s personnel file. </span>\n<span class=\"token comment\">;     How should the record be structured in order to make this operation work?</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">make-hq-record</span> division record<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> division record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-record-division</span> record<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-record-hq</span> record<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-salary</span> file<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span> <span class=\"token string\">'get-salary</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-division</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">get-record-hq</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; (c) Implement for headquarters a `find-employee-record` procedure. This should </span>\n<span class=\"token comment\">;     search all the divisions’ files for the record of a given employee and return</span>\n<span class=\"token comment\">;     the record. Assume that this procedure takes as arguments an employee’s name </span>\n<span class=\"token comment\">;     and a list of all the divisions’ files.</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find-employee-record</span> name files<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> files<span class=\"token punctuation\">)</span> <span class=\"token string\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">not</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get-record</span> name <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">(</span><span class=\"token function\">get-record</span> name <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find-employee-record</span> name <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; (d) When Insatiable takes over a new company, what changes must be made in order </span>\n<span class=\"token comment\">;     to incorporate the new personnel information into the central system?</span>\n\n<span class=\"token comment\">; Ans:</span>\n<span class=\"token comment\">; The new division's methods should be installed like pacakge</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span>install-new-company<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">put</span> <span class=\"token string\">'new-company</span> <span class=\"token string\">'get-record</span> new-company-get-record<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">put</span> <span class=\"token string\">'new-company</span> <span class=\"token string\">'get-salary</span> new-company-get-salary<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">'done)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"Exercise 2.18","description":"Exercise 2.18"}}},"pageContext":{"slug":"/stats/lol/"}}
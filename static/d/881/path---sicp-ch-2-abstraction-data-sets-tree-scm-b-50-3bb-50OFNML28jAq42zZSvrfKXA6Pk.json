{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Sets as trees\n(define (entry tree) (car tree))\n(define (left-branch tree) (cadr tree))\n(define (right-branch tree) (caddr tree))\n\n(define (make-tree entry left right)\n    (list entry left right))\n\n; element-of-set? operation\n(define (element-of-set? x set)\n    (cond ((null? set) #f)\n          ((= x (entry set)) #t)\n          ((< x (entry set))\n            (element-of-set? x (left-branch set)))\n          ((> x (entry set))\n            (element-of-set? x (right-branch set)))))\n\n; Testing `element-of-set?`\n(define set1 (list 7 (list 3 (list 1 '() '()) (list 5 '() '())) \n                     (list 9 '() (list 11 '() '()))))\n\n(entry set1) ;Value: 7\n(left-branch set1) ;(3 (1) (5))\n(right-branch set1) ;(9 () (11))\n\n(element-of-set? 7 set1) ;#t\n(element-of-set? 1 set1) ;#t\n(element-of-set? 11 set1) ;#t\n(element-of-set? 12 set1) ;#f\n\n; Adjoin operation\n(define (adjoin-set x set)\n    (cond ((null? set) (make-tree x '() '()))\n          ((= x (entry set)) set)\n          ((< x (entry set))\n            (make-tree (entry set)\n                       (adjoin-set x (left-branch set))\n                       (right-branch set)))\n          ((> x (entry set))\n            (make-tree (entry set)\n                       (left-branch set)\n                       (adjoin-set x (right-branch set))))))\n\n; Test adjoin\n(adjoin-set 8 set1)\n; (7 (3 (1 () ()) (5 () ())) (9 (8 () ()) (11 () ())))"}}}},"pageContext":{"name":"sets-tree.scm","expr":"master:sicp/ch2-abstraction-data/sets-tree.scm"}}
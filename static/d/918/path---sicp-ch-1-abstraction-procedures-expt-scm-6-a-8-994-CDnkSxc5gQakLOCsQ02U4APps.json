{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Exponent Recursive\n; requires Θ(n) steps and Θ(n) space\n(define (expt b n)\n    (cond ((= n 0) 1)\n    (else (* b (expt b (- n 1)))))\n)\n(expt 2 6) ;Value: 64\n\n; Exponent iterative\n; requires Θ(n) steps and Θ(1) space\n(define (expt b n)\n    (define (expt-iter b prod n)\n        (cond ((= n 0) prod)\n            (else (expt-iter b (* b prod) (- n 1)))\n        )\n    )\n    (expt-iter b 1 n)\n)\n(expt 2 6) ;Value: 64\n(expt 2 0) ;Value: 1\n\n; Exponent fast\n; b^n = (b^n/2)^2    if n is even\n; b^n = b * b^(n-1)  if n is odd\n;\n; This has  Θ(log n) growth,\n; for example for n = 1000, it requires only 14 multiplications\n(define (fast-exp b n)\n    (define (even? n) (= (remainder n 2) 0))\n    (cond ((= n 0) 1)\n          ((even? n) (square (fast-exp b (/ n 2))))\n          (else (* b (fast-exp b (- n 1))))\n    )\n)\n(fast-exp 2 6) ;Value: 64\n(fast-exp 2 5) ;Value: 32"}}}},"pageContext":{"name":"expt.scm","expr":"master:sicp/ch1-abstraction-procedures/expt.scm"}}
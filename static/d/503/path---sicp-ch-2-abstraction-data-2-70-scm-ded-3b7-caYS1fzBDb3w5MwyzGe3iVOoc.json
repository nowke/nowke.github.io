{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The following eight-symbol alphabet with associated relative frequencies was \n; designed to efficiently encode the lyrics of 1950s rock songs. (Note that the \n; “symbols” of an “alphabet” need not be individual letters.)\n; ```\n; A    2   GET 2   SHA 3   WAH 1 \n; BOOM 1   JOB 2   NA 16   YIP 9\n; ```\n; Use `generate-huffman-tree` (Exercise 2.69) to generate a corresponding Huffman \n; tree, and use encode (Exercise 2.68) to encode the following message:\n; Get a job\n; Sha na na na na na na na na\n; Get a job\n; Sha na na na na na na na na\n; Wah yip yip yip yip yip yip yip yip yip\n; Sha boom\n; \n; How many bits are required for the encoding? What is the smallest number of bits \n; that would be needed to encode this song if we used a fixed-length code for the \n; eight-symbol alphabet?\n\n; Helpers\n(define (make-leaf symbol weight) (list 'leaf symbol weight))\n(define (leaf? object) (eq? (car object) 'leaf))\n(define (symbol-leaf x) (cadr x))\n(define (weight-leaf x) (caddr x))\n\n(define (make-code-tree left right)\n    (list left\n          right\n          (append (symbols left) (symbols right))\n          (+ (weight left) (weight right))))\n(define (left-branch tree) (car tree))\n(define (right-branch tree) (cadr tree))\n(define (symbols tree)\n    (if (leaf? tree)\n        (list (symbol-leaf tree))\n        (caddr tree)))\n(define (weight tree)\n    (if (leaf? tree)\n        (weight-leaf tree)\n        (cadddr tree)))\n(define (decode bits tree)\n    (define (decode-1 bits current-branch)\n        (if (null? bits)\n            '()\n            (let ((next-branch\n                    (choose-branch (car bits) current-branch)))\n                (if (leaf? next-branch)\n                    (cons (symbol-leaf next-branch)\n                          (decode-1 (cdr bits) tree))\n                    (decode-1 (cdr bits) next-branch)))))\n    (decode-1 bits tree))\n(define (choose-branch bit branch)\n    (cond ((= bit 0) (left-branch branch))\n          ((= bit 1) (right-branch branch))\n          (else (error \"bad bit: CHOOSE-BRANCH\" bit))))\n(define (adjoin-set x set)\n    (cond ((null? set) (list x))\n          ((< (weight x) (weight (car set))) (cons x set))\n          (else (cons (car set) (adjoin-set x (cdr set))))))\n(define (make-leaf-set pairs)\n    (if (null? pairs)\n        '()\n        (let ((pair (car pairs)))\n            (adjoin-set (make-leaf (car pair)       ; symbol\n                                   (cadr pair))     ; frequency\n                        (make-leaf-set (cdr pairs))))))\n\n; Successive merge procedure\n(define (successive-merge leaf-set)\n    (if (null? (cdr leaf-set))\n        (car leaf-set)\n        (successive-merge\n            (adjoin-set\n                (make-code-tree (car leaf-set) (cadr leaf-set))\n                (cddr leaf-set)))))\n(define (generate-huffman-tree pairs) \n    (successive-merge (make-leaf-set pairs)))\n(define (encode message tree) \n    (if (null? message)\n        '()\n        (append (encode-symbol (car message) tree)\n                (encode (cdr message) tree))))\n(define (encode-symbol symbol tree)\n    (cond \n        ((leaf? tree) '())\n        ((element-of-set? symbol (symbols tree))\n            (let ((left  (left-branch tree))\n                  (right (right-branch tree)))\n                (if (element-of-set? symbol (symbols left))\n                    (cons 0 (encode-symbol symbol left))\n                    (cons 1 (encode-symbol symbol right)))))\n        (else (error \"Bad symbol\" symbol))))\n(define (element-of-set? x set) \n    (cond ((null? set) false) \n            ((equal? x (car set)) true) \n            (else (element-of-set? x (cdr set))))) \n                \n; Answer\n(define alphabet '((A 2) (GET 2) (SHA 3) (WAH 1) (BOOM 1) (JOB 2) (NA 16) (YIP 9)))\n(define song-tree (generate-huffman-tree alphabet))\n; ((leaf na 16) ((leaf yip 9) (((leaf a 2) ((leaf boom 1) (leaf wah 1) (boom wah) 2) \n; (a boom wah) 4) ((leaf sha 3) ((leaf job 2) (leaf get 2) (job get) 4) (sha job get) \n; 7) (a boom wah sha job get) 11) (yip a boom wah sha job get) 20) (na yip a boom wah\n;  sha job get) 36)\n\n(define song \n    '(GET A JOB\n      SHA NA NA NA NA NA NA NA NA\n      GET A JOB\n      SHA NA NA NA NA NA NA NA NA\n      WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP \n      SHA BOOM))\n\n(define encoded-song (encode song song-tree))\n(length encoded-song) ;Value: 84\n\n; Hence \"84 bits\" are needed\n\n; If we used fixed length encoding, we need 36 x 3 = \"108 bits\""}}}},"pageContext":{"name":"2.70.scm","expr":"master:sicp/ch2-abstraction-data/2.70.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Complete the following definitions of reverse (Exercise 2.18) in terms of \n; fold-right and fold-left from Exercise 2.38:\n; (define (reverse sequence)\n;   (fold-right (lambda (x y) ⟨??⟩) nil sequence))\n; (define (reverse sequence)\n;   (fold-left (lambda (x y) ⟨??⟩) nil sequence))\n\n(define nil '())\n(define (accumulate op initial sequence)\n    (if (null? sequence) \n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n(define fold-right accumulate)\n(define (fold-left op initial sequence)\n    (define (iter result rest)\n        (if (null? rest)\n            result\n            (iter (op result (car rest))\n                  (cdr rest))))\n    (iter initial sequence))\n\n(define (reverse sequence)\n    (fold-right (lambda (x y) (append y (list x))) nil sequence))\n(reverse (list 1 2 3 4)) ;Value 2: (4 3 2 1)\n\n(define (reverse sequence)\n    (fold-left (lambda (x y) (cons y x)) nil sequence))\n(reverse (list 1 2 3 4)) ;Value 3: (4 3 2 1)"}}}},"pageContext":{"name":"2.39.scm","expr":"master:sicp/ch2-abstraction-data/2.39.scm"}}
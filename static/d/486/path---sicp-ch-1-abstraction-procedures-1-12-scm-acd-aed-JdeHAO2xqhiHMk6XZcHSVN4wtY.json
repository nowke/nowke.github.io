{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The following pattern of numbers is called Pascal’s triangle.\n;        1\n;      1   1\n;     1  2   1\n;   1   3   3  1\n;  1   4  6   4  1\n;\n; The numbers at the edge of the triangle are all 1, \n; and each number inside the triangle is the sum of \n; the two numbers above it. \n; Write a procedure that computes elements of Pascal’s triangle \n; by means of a recursive process\n\n; Answer\n; P(row, col) => \n;    if row = col or col = 1 => 1\n;    else =>P(row - 1, col - 1) + P(row - 1, col)\n;\n(define (pascal row col)\n    (cond ((or (= row col) (= col 1)) 1)\n          (else (+ (pascal (- row 1) (- col 1)) (pascal (- row 1) col))))\n)\n\n(pascal 1 1) ; 1\n(pascal 2 1) ; 1\n(pascal 2 2) ; 1\n(pascal 3 2) ; 2\n(pascal 4 2) ; 3\n(pascal 5 2) ; 4\n(pascal 5 3) ; 6"}}}},"pageContext":{"name":"1.12.scm","expr":"master:sicp/ch1-abstraction-procedures/1.12.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Fill in the missing expressions to complete the following definitions of some basic\n; list-manipulation operations as accumulations:\n;\n; (define (map p sequence)\n;   (accumulate (lambda (x y) <??>) nil sequence))\n; (define (append seq1 seq1)\n;   (accumulate cons <??> <??>))\n; (define (length sequence)\n;   (accumulate <??> 0 sequence))\n\n(define nil '())\n(define (accumulate op initial sequence)\n    (if (null? sequence) \n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n\n(define (map p sequence)\n    (accumulate \n        (lambda (x y) (cons (p x) y))\n        nil\n        sequence))\n(map square (list 1 2 3 4)) ; (1 4 9 16)\n\n(define (append seq1 seq2)\n    (accumulate cons seq2 seq1))\n(append (list 1 2 3 4) (list 5 6 7 8)) ; (1 2 3 4 5 6 7 8)\n\n(define (length sequence)\n    (accumulate (lambda (x y) (+ 1 y)) 0 sequence))\n(length (list 1 2 3 5)) ;Value: 4"}}}},"pageContext":{"name":"2.33.scm","expr":"master:sicp/ch2-abstraction-data/2.33.scm"}}
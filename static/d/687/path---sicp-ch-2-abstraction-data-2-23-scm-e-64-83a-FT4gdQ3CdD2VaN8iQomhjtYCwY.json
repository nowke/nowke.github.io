{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The procedure for-each is similar to map. It takes as arguments a procedure \n; and a list of elements. However, rather than forming a list of the results, \n; for-each just applies the procedure to each of the elements in turn, from \n; left to right. The values returned by applying the procedure to the elements \n; are not used at allâ€”for-each is used with procedures that perform an action, \n; such as printing. For example,\n; (for-each (lambda (x) (newline)\n;                 (display x))\n;                 (list 57 321 88))\n; 57 321 88\n; The value returned by the call to for-each (not illustrated above) can be \n; something arbitrary, such as true. Give an implementation of for-each.\n\n(define (for-each proc items)\n    (cond ((null? items) #t)\n          (else (proc (car items))\n                (for-each proc (cdr items)))))\n\n(for-each (lambda (x) \n            (newline)\n            (display x))\n          (list 57 321 88))\n\n; 57\n; 321\n; 88\n; Value: #t"}}}},"pageContext":{"name":"2.23.scm","expr":"master:sicp/ch2-abstraction-data/2.23.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; After considerable work, Alyssa P. Hacker delivers her finished \n; system. Several years later, after she has forgotten all about \n; it, she gets a frenzied call from an irate user, Lem E. Tweakit. \n; It seems that Lem has noticed that the formula for parallel \n; resistors can be written in two algebraically equivalent ways:\n;              R1R2 / (R1 + R2)\n; and\n;            1 / ((1/R1) + (1/R2))\n; He has written the following two programs, each of which computes \n; the parallel-resistors formula differently:\n(define (par1 r1 r2)\n    (div-interval (mul-interval r1 r2)\n                  (add-interval r1 r2)))\n(define (par2 r1 r2)\n    (let ((one (make-interval 1 1)))\n        (div-interval\n            one (add-interval (div-interval one r1)\n                              (div-interval one r2)))))\n\n; Lem complains that Alyssaâ€™s program gives different answers for \n; the two ways of computing. This is a serious complaint.\n; Demonstrate that Lem is right. Investigate the behavior of the \n; system on a variety of arithmetic expressions. Make some intervals \n; A and B, and use them in computing the expressions A/A and A/B. \n; You will get the most insight by using intervals whose width is a \n; small percentage of the center value. Examine the results of the \n; computation in center-percent form (see Exercise 2.12).\n\n; Answer\n; --------------------------------------\n\n; Let's get the helpers\n(define (make-interval a b)\n    (cons (min a b) (max a b)))\n(define (lower-bound z) (car z))\n(define (upper-bound z) (cdr z))\n(define (make-center-percent c p)\n    (make-center-width c (/ (* c p) 100)))\n(define (make-center-width c w) \n    (make-interval (- c w) (+ c w)))\n(define (center i)\n    (/ (+ (lower-bound i) (upper-bound i)) 2))\n(define (width i)\n    (/ (- (upper-bound i) (lower-bound i)) 2))\n(define (percent i)\n    (* (/ (width i) (center i)) 100.0))\n(define (add-interval x y)\n    (make-interval (+ (lower-bound x) (lower-bound y))\n                (+ (upper-bound x) (upper-bound y))))\n(define (mul-interval x y)\n    (let ((p1 (* (lower-bound x) (lower-bound y)))\n          (p2 (* (lower-bound x) (upper-bound y)))\n          (p3 (* (upper-bound x) (lower-bound y)))\n          (p4 (* (upper-bound x) (upper-bound y))))\n     (make-interval (min p1 p2 p3 p4)\n                    (max p1 p2 p3 p4))))\n(define (div-interval x y) \n    (mul-interval\n        x\n        (make-interval (/ 1.0 (upper-bound y))\n                       (/ 1.0 (lower-bound y)))))\n(define (print-interval z)\n    (newline)\n    (display \"[\")\n    (display (lower-bound z))\n    (display \", \")\n    (display (upper-bound z))\n    (display \"]\"))\n\n; (i) Test Lem's complaint\n; Take 2 resistors [3.5, 3.8] and [10, 10.3]\n(define computation1 \n    (par1 (make-interval 3.5 3.8) (make-interval 10 10.3)))\n(define computation2 \n    (par2 (make-interval 3.5 3.8) (make-interval 10 10.3)))\n(print-interval computation1) ; [2.48, 2.9]\n(print-interval computation2) ; [2.6, 2.77]\n; => Lem's complaint is valid, we get two different results\n\n; (ii) Let's define A and B using center-percent form\n(define A (make-center-percent 50 5))\n(define B (make-center-percent 100 8))\n\n; Operation A/A\n(define AA (div-interval A A))\n(center AA) ;Value: 1.0050125313283207\n(percent AA) ;Value: 9.97506234413964\n\n; Operation A/B\n(define AB (div-interval A B))\n(center AB) ;Value: .5052334943639292\n(percent AB) ;Value: 12.948207171314744\n\n; => As we can observe, center of A/A is not exactly \"1\"\n;   also, center of A/B is not exactly \"0.5\"\n; Hence there's something flawed in our interval operations\n\n; Let's try one more operation 1/A (which I found out helpful\n; for next exercise)\n(define one (make-center-percent 1 0))\n(define 1A (div-interval one A))\n(center 1A) ; 2.0050125313283207e-2 (~0.002)\n(percent 1A) ; 4.999999999999995 (~5%)\n\n; Also, A/1\n(define A1 (div-interval A one))\n(center A1) ;Value: 50.\n(percent A1) ;Value: 5."}}}},"pageContext":{"name":"2.14.scm","expr":"master:sicp/ch2-abstraction-data/2.14.scm"}}
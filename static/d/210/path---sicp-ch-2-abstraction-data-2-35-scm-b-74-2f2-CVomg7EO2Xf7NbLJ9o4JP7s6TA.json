{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Redefine count-leaves from Section 2.2.2 as an accumulation:\n; \n; (define (count-leaves t)\n;   (accumulate ⟨??⟩ ⟨??⟩ (map ⟨??⟩ ⟨??⟩)))\n\n(define nil '())\n(define (accumulate op initial sequence)\n    (if (null? sequence) \n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n\n(define (enumerate-tree tree)\n    (cond ((null? tree) nil)\n            ((not (pair? tree)) (list tree))\n            (else (append (enumerate-tree (car tree))\n                        (enumerate-tree (cdr tree))))))\n(define (count-leaves tree)\n    (accumulate\n        +\n        0\n        (map (lambda (x) 1) (enumerate-tree tree))))\n(count-leaves (list 1 2 (list 3 4 (list 5 6)))) ;Value: 6"}}}},"pageContext":{"name":"2.35.scm","expr":"master:sicp/ch2-abstraction-data/2.35.scm"}}
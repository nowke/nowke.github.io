{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Define an encoding tree and a sample message:\n; (define sample-tree \n;     (make-code-tree (make-leaf 'A 4)\n;                     (make-code-tree\n;                         (make-leaf 'B 2)\n;                         (make-code-tree\n;                             (make-leaf 'D 1)\n;                             (make-leaf 'C 1)))))\n; (define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))\n\n; Answer\n; Define procedures\n(define (make-leaf symbol weight) (list 'leaf symbol weight))\n(define (leaf? object) (eq? (car object) 'leaf))\n(define (symbol-leaf x) (cadr x))\n(define (weight-leaf x) (caddr x))\n\n(define (make-code-tree left right)\n    (list left\n          right\n          (append (symbols left) (symbols right))\n          (+ (weight left) (weight right))))\n(define (left-branch tree) (car tree))\n(define (right-branch tree) (cadr tree))\n(define (symbols tree)\n    (if (leaf? tree)\n        (list (symbol-leaf tree))\n        (caddr tree)))\n(define (weight tree)\n    (if (leaf? tree)\n        (weight-leaf tree)\n        (cadddr tree)))\n(define (decode bits tree)\n    (define (decode-1 bits current-branch)\n        (if (null? bits)\n            '()\n            (let ((next-branch\n                    (choose-branch (car bits) current-branch)))\n                (if (leaf? next-branch)\n                    (cons (symbol-leaf next-branch)\n                          (decode-1 (cdr bits) tree))\n                    (decode-1 (cdr bits) next-branch)))))\n    (decode-1 bits tree))\n(define (choose-branch bit branch)\n    (cond ((= bit 0) (left-branch branch))\n          ((= bit 1) (right-branch branch))\n          (else (error \"bad bit: CHOOSE-BRANCH\" bit))))\n(define (adjoin-set x set)\n    (cond ((null? set) (list x))\n          ((< (weight x) (weight (car set))) (cons x set))\n          (else (cons (car set) (adjoin-set x (cdr set))))))\n(define (make-leaf-set pairs)\n    (if (null? pairs)\n        '()\n        (let ((pair (car pairs)))\n            (adjoin-set (make-leaf (car pair)       ; symbol\n                                   (cadr pair))     ; frequency\n                        (make-leaf-set (cdr pairs)))))) \n\n(define sample-tree \n    (make-code-tree (make-leaf 'A 4)\n                    (make-code-tree\n                        (make-leaf 'B 2)\n                        (make-code-tree\n                            (make-leaf 'D 1)\n                            (make-leaf 'C 1)))))\n(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))\n\n; Testing\n(decode sample-message sample-tree)\n; (0 1 1 0 0 1 0 1 0 1 1 1 0)\n; (A D     A B   B   C     A)\n; (a d a b b c a)"}}}},"pageContext":{"name":"2.67.scm","expr":"master:sicp/ch2-abstraction-data/2.67.scm"}}
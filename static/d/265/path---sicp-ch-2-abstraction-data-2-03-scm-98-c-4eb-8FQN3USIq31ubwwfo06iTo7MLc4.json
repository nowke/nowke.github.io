{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Implement a representation for rectangles in a plane. \n; (Hint: You may want to make use of Exercise 2.2.) In \n; terms of your constructors and selectors, create \n; procedures that compute the perimeter and the area of \n; a given rectangle. Now implement a different representation \n; for rectangles. Can you design your system with suitable \n; abstraction barriers, so that the same perimeter and area \n; procedures will work using either representation?\n\n; Points\n(define (make-point x y) (cons x y))\n(define (x-point point) (car point))\n(define (y-point point) (cdr point))\n\n; Rectangle\n; (node1) --------------\n;         |             |\n;         |             |\n;         |             |\n;         --------------- (node2)\n(define (make-rect node1 node2) (cons node1 node2))\n(define (rect-node1 rect) (car rect))\n(define (rect-node2 rect) (cdr rect))\n\n; Procedure for calculating width (x2 - x1)\n(define (get-rect-width rect)\n    (abs (- (x-point (rect-node1 rect)) \n         (x-point (rect-node2 rect)))))\n\n; Procedure for calculating height (y2 - y1)\n(define (get-rect-height rect)\n    (abs (- (y-point (rect-node1 rect)) \n            (y-point (rect-node2 rect)))))\n; Perimeter\n(define (perimeter rect)\n    (* 2 (+ (get-rect-width rect) (get-rect-height rect))))\n\n; Area\n(define (area rect)\n    (* (get-rect-width rect) (get-rect-height rect)))\n\n; Testing\n(define myrect (make-rect (make-point 2 4) (make-point 6 9)))\n(perimeter myrect) ;Value: 18\n(area myrect) ;Value: 20\n\n; -------------------------------\n\n; Let's define another simplest representation of rectangle\n; using just plain numbers (width and height)\n;\n;           width\n;  ------------------------\n;  |                      |\n;  |                      |  height\n;  |                      |\n;  ------------------------\n\n(define (make-rect-2 width height) (cons width height))\n(define (get-rect-width rect) (car rect))\n(define (get-rect-height rect) (cdr rect))\n\n; Testing\n(define myrect2 (make-rect-2 4 10))\n(perimeter myrect2) ;Value: 28\n(area myrect2) ;Value: 40\n\n; We defined another representation of rectangle and did not\n; have to change the implementation of `perimeter` and `area`"}}}},"pageContext":{"name":"2.03.scm","expr":"master:sicp/ch2-abstraction-data/2.03.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Extend the differentiation program to handle sums and products of arbitrary \n; numbers of (two or more) terms. Then the last example above could be expressed \n; as\n; (deriv '(* x y (+ x 3)) 'x)\n; Try to do this by changing only the representation for sums and products, \n; without changing the deriv procedure at all. For example, the addend of a sum \n; would be the first term, and the augend would be the sum of the rest of the terms.\n\n; New definitions for `augend` and `multiplcand` are,\n; ====================================================\n(define (augend s)\n    (if (null? (cdddr s))\n        (caddr s)\n        (make-sum (caddr s) (cadddr s))))\n\n(define (multiplicand p)\n    (if (null? (cdddr p))\n        (caddr p)\n        (make-product (caddr p) (cadddr p))))\n; ====================================================\n\n; Testing\n(define (variable? x) (symbol? x))\n(define (same-variable? v1 v2)\n    (and (variable? v1) (variable? v2) (eq? v1 v2)))\n(define (=number? exp num) \n    (and (number? exp) (= exp num)))\n(define (sum? x) (and (pair? x) (eq? (car x) '+)))\n(define (addend s) (cadr s))\n(define (make-sum a1 a2) \n    (cond ((=number? a1 0) a2) \n            ((=number? a2 0) a1)\n            ((and (number? a1) (number? a2)) (+ a1 a2))\n            (else (list '+ a1 a2))))\n\n(define (product? x) (and (pair? x) (eq? (car x) '*)))\n(define (multiplier p) (cadr p))\n(define (make-product m1 m2) \n    (cond ((or (=number? m1 0) (=number? m2 0)) 0)\n            ((=number? m1 1) m2)\n            ((=number? m2 1) m1)\n            ((and (number? m1) (number? m2)) (* m1 m2))\n            (else (list '* m1 m2))))\n\n(define (deriv exp var)\n    (cond ((number? exp) 0)\n          ((variable? exp) (if (same-variable? exp var) 1 0))\n          ((sum? exp) (make-sum (deriv (addend exp) var)\n                                (deriv (augend exp) var)))\n          ((product? exp)\n            (make-sum\n                (make-product \n                    (multiplier exp)\n                    (deriv (multiplicand exp) var))\n                (make-product\n                    (deriv (multiplier exp) var)\n                    (multiplicand exp))))\n          (else\n            (error \"unknown expression type: DERIV\" exp))))\n\n(deriv '(* x y (+ x 3)) 'x)\n; (+ (* x y) (* y (+ x 3)))\n\n(deriv '(* x y (+ x 3 y)) 'x)\n; (+ (* x y) (* y (+ x 3 y)))"}}}},"pageContext":{"name":"2.57.scm","expr":"master:sicp/ch2-abstraction-data/2.57.scm"}}
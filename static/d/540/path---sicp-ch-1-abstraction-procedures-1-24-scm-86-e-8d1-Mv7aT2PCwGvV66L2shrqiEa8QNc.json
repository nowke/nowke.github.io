{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Modify the timed-prime-test procedure of Exercise 1.22 \n; to use fast-prime? (the Fermat method), and test each \n; of the 12 primes you found in that exercise. Since the \n; Fermat test has Î˜(log n) growth, how would you expect \n; the time to test primes near 1,000,000 to compare with \n; the time needed to test primes near 1000? Do your data \n; bear this out? Can you explain any discrepancy you find?\n\n; Let's define fast-prime procedure\n(define (even? x) (= (remainder x 2) 0))\n(define (expmod base exp m)\n    (cond ((= exp 0) 1)\n          ((even? exp)\n           (remainder\n            (square (expmod base (/ exp 2) m))\n             m)) \n          (else\n            (remainder\n             (* base (expmod base (- exp 1) m))\n             m))))\n(define (fermat-test n) \n    (define (try-it a)\n     (= (expmod a n n) a))\n    (try-it (+ 1 (random (- n 1)))))\n\n(define (fast-prime? n times) \n    (cond ((= times 0) true)\n          ((fermat-test n) (fast-prime? n (- times 1))) \n          (else false)))\n(define (prime? n)\n   (fast-prime? n 500)) \n\n; Define `timed-prime-test` procedure\n(define (timed-prime-test n)\n    (newline)\n    (display n)\n    (start-prime-test n (runtime)))\n(define (start-prime-test n start-time)\n    (if (prime? n)\n        (report-prime (- (runtime) start-time)))) \n(define (report-prime elapsed-time)\n    (display \" *** \")\n    (display elapsed-time))\n\n; Test the timing on large prime numbers\n(timed-prime-test 1000000007)    ; .05000000000000002\n(timed-prime-test 1000000009)    ; .03999999999999998\n(timed-prime-test 1000000021)    ; .04000000000000001\n(timed-prime-test 10000000019)   ; .06\n(timed-prime-test 10000000033)   ; .04999999999999999\n(timed-prime-test 10000000061)   ; .06\n(timed-prime-test 100000000003)  ; .06\n(timed-prime-test 100000000019)  ; .06000000000000005\n(timed-prime-test 100000000057)  ; .06000000000000005\n(timed-prime-test 1000000000039) ; .06999999999999995\n(timed-prime-test 1000000000061) ; .06000000000000005\n\n; Test by doubling number of digits\n(timed-prime-test 1000003)       ; 3.9999999999999925e-2\n(timed-prime-test 1000000000063) ; .08000000000000007\n; i.e.\n; 10^6 => 0.04\n; 10^12 => 0.08, which is a logarithmic scale"}}}},"pageContext":{"name":"1.24.scm","expr":"master:sicp/ch1-abstraction-procedures/1.24.scm"}}
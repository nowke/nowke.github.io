{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The accumulate procedure is also known as fold-right, because it combines \n; the first element of the sequence with the result of combining all the \n; elements to the right. There is also a fold-left, which is similar to fold-right, \n; except that it combines elements working in the opposite direction:\n(define (fold-left op initial sequence)\n    (define (iter result rest)\n        (if (null? rest)\n            result\n            (iter (op result (car rest))\n                  (cdr rest))))\n    (iter initial sequence))\n\n; What are the values of\n; (fold-right / 1 (list 1 2 3))\n; (fold-left / 1 (list 1 2 3))\n; (fold-right list nil (list 1 2 3))\n; (fold-left list nil (list 1 2 3))    \n;\n; Give a property that op should satisfy to guarantee that fold-right and fold-left \n; will produce the same values for any sequence.\n\n(define nil '())\n(define (accumulate op initial sequence)\n    (if (null? sequence) \n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n(define fold-right accumulate)\n\n\n(fold-right / 1 (list 1 2 3)) ;Value: 3/2 (3/2/1)\n(fold-left / 1 (list 1 2 3)) ;Value: 1/6 (1/2/3)\n(fold-right list nil (list 1 2 3)) ; (1 (2 (3 ())))\n(fold-left list nil (list 1 2 3)) ; (((() 1) 2) 3)\n\n; For `fold-left` and `fold-right` to produce same result, \n; `op` should be Commutative and Associative"}}}},"pageContext":{"name":"2.38.scm","expr":"master:sicp/ch2-abstraction-data/2.38.scm"}}
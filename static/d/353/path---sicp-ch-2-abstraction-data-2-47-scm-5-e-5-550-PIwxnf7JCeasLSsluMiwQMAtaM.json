{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Here are two possible constructors for frames:\n; (define (make-frame origin edge1 edge2) (list origin edge1 edge2))\n; (define (make-frame origin edge1 edge2) (cons origin (cons edge1 edge2)))\n; For each constructor supply the appropriate selectors to produce an implementation for frames.\n\n(define (make-vect x y) (cons x y))\n(define (xcor-vect v) (car v))\n(define (ycor-vect v) (cdr v))\n\n; Implementation 1\n(define (make-frame origin edge1 edge2) \n    (list origin edge1 edge2))\n(define (frame-origin frame) (car frame))\n(define (frame-edge1 frame) (cadr frame))\n(define (frame-edge2 frame) (cadr (cdr frame)))\n\n(define f1 (make-frame \n            (make-vect 1 1) \n            (make-vect 2 3)\n            (make-vect 7 8))) ; ((1 . 1) (2 . 3) (7 . 8))\n(frame-origin f1) ; (1 . 1)\n(frame-edge1 f1) ; (2 . 3)\n(frame-edge2 f1) ; (7 . 8)\n\n; Implementation 2\n(define (make-frame origin edge1 edge2) \n    (cons origin (cons edge1 edge2)))\n(define (frame-origin frame) (car frame))\n(define (frame-edge1 frame) (cadr frame))\n(define (frame-edge2 frame) (cdr (cdr frame)))\n\n(define f2 (make-frame \n            (make-vect 1 1) \n            (make-vect 2 3)\n            (make-vect 7 8))); ((1 . 1) (2 . 3) 7 . 8)\n\n(frame-origin f2) ; (1 . 1)\n(frame-edge1 f2) ; (2 . 3)\n(frame-edge2 f2) ; (7 . 8)"}}}},"pageContext":{"name":"2.47.scm","expr":"master:sicp/ch2-abstraction-data/2.47.scm"}}
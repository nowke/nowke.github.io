{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Suppose you are designing a generic arithmetic system for dealing with the tower \n; of types shown in Figure 2.25: integer, rational, real, complex. For each type \n; (except complex), design a procedure that raises objects of that type one level \n; in the tower. Show how to install a generic raise operation that will work for \n; each type (except complex).\n\n; Source: [https://wizardbook.wordpress.com/2010/12/08/exercise-2-83/](https://wizardbook.wordpress.com/2010/12/08/exercise-2-83/)\n\n(define (raise x)\n    (apply-generic 'raise x))\n\n; Integer package\n(put 'raise '(integer) (lambda (n) (make-rational n 1)))\n\n; Rational package\n(define (rational->real r) \n    (make-real (/ (numer r) (denom r)))) \n(put 'raise '(rational) rational->real)\n\n; Real package\n(define (real->complex r)\n    (make-complex-from-real-imag r 0))\n(put 'raise '(real) real->complex)\n\n"}}}},"pageContext":{"name":"2.83.scm","expr":"master:sicp/ch2-abstraction-data/2.83.scm"}}
{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Defining hierarchical strucutre\n(define x (cons (list 1 2) (list 3 4)))\n(length x) ;Value: 3 (length is defined in scheme)\n\n; Implement `count-leaves` procedure\n(define (count-leaves x)\n    (cond ((null? x) 0)\n          ((not (pair? x)) 1)\n          (else (+ (count-leaves (car x))\n                   (count-leaves (cdr x))))))\n\n(count-leaves x) ;Value: 4\n(count-leaves \n    (cons (cons (list 1 2) 3) \n          (cons (list 7 8) (list 4 6)))) ;Value: 7"}}}},"pageContext":{"name":"tree.scm","expr":"master:sicp/ch2-abstraction-data/tree.scm"}}
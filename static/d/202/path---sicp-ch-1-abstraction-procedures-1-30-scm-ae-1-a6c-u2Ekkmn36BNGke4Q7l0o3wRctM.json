{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; The sum procedure above generates a linear recursion. \n; The procedure can be rewritten so that the sum is \n; performed iteratively. Show how to do this by filling \n; in the missing expressions in the following definition:\n;\n; (define (sum term a next b) \n;   (define (iter a result)\n;       (if ⟨??⟩ \n;           ⟨??⟩\n;           (iter ⟨??⟩ ⟨??⟩))) \n;   (iter ⟨??⟩ ⟨??⟩))    \n(define (sum term a next b)\n    (define (iter a result)\n        (if (> a b)\n            result\n            (iter (next a) (+ result (term a)))))\n    (iter a 0))\n\n(define (pi-sum a b) \n    (define (pi-term x)\n        (/ 1.0 (* x (+ x 2)))) \n    (define (pi-next x)\n        (+ x 4))\n    (sum pi-term a pi-next b))\n\n(* 8 (pi-sum 1 1000)) ;Value: 3.139592655589782\n"}}}},"pageContext":{"name":"1.30.scm","expr":"master:sicp/ch1-abstraction-procedures/1.30.scm"}}
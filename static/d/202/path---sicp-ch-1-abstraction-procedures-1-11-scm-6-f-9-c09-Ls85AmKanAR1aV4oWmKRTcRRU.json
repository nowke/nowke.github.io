{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; A function f is defined by the rule that\n; \n; f(n) = n if n < 3\n;      = f(n-1) + 2f(n-2) + 3f(n-3) if n >= 3\n;\n; Write a procedure that computes f by means of a recursive process. \n; Write a procedure that computes f by means of an iterative process.\n(define (f-rec n) \n    (cond ((< n 3) n)\n          (else (+ (f-rec (- n 1))\n                   (* 2 (f-rec (- n 2)))\n                   (* 3 (f-rec (- n 3))))))\n)\n\n(define (f-iter n)\n    (define (compute a b c)\n        (+ c (* 2 b) (* 3 a)))\n    (define (f-iter-inner a b c count)\n        (cond ((= count 2) c)\n              ((< count 2) count)\n              (else (f-iter-inner b c (compute a b c) (- count 1)))))\n    (f-iter-inner 0 1 2 n)\n)\n\n(f-rec 5) ;Value: 25\n(f-rec 4) ;Value: 11\n(f-rec 3) ;Value: 4\n(f-rec 2) ;Value: 2\n(f-rec 1) ;Value: 1\n(f-rec 0) ;Value: 0\n\n(f-iter 5) ;Value: 25\n(f-iter 4) ;Value: 11\n(f-iter 3) ;Value: 4\n(f-iter 2) ;Value: 2\n(f-iter 1) ;Value: 1\n(f-iter 0) ;Value: 0"}}}},"pageContext":{"name":"1.11.scm","expr":"master:sicp/ch1-abstraction-procedures/1.11.scm"}}
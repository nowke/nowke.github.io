{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; Consider the change-counting program of Section 1.2.2. It would be nice \n; to be able to easily change the currency used by the program, so that \n; we could compute the number of ways to change a British pound, for \n; example. As the program is written, the knowledge of the currency is \n; distributed partly into the procedure first-denomination and partly \n; into the procedure count-change (which knows that there are five kinds \n; of U.S. coins). It would be nicer to be able to supply a list of coins \n; to be used for making change.\n; We want to rewrite the procedure cc so that its second argument is a \n; list of the values of the coins to use rather than an integer specifying \n; which coins to use. We could then have lists that defined each kind of \n; currency:\n(define us-coins (list 50 25 10 5 1))\n(define uk-coins (list 100 50 20 10 5 2 1 0.5))\n\n; We could then call cc as follows:\n; (cc 100 us-coins)\n; 292\n\n; To do this will require changing the program cc somewhat. It will still \n; have the same form, but it will access its second argument differently, \n; as follows:\n(define (cc amount coin-values) \n    (cond ((= amount 0) 1)\n          ((or (< amount 0) (no-more? coin-values)) 0) \n          (else\n            (+ (cc amount\n                   (except-first-denomination coin-values))\n               (cc (- amount\n                      (first-denomination coin-values))\n                   coin-values)))))\n\n; Define the procedures `first-denomination`, `except-first-denomination`, \n; and `no-more`? in terms of primitive operations on list structures. Does \n; the order of the list `coin-values` affect the answer produced by cc? \n; Why or why not?\n\n; Answer\n; -----------------------------------------------------------\n\n; Define `no-more?`, `except-first-denomination` and `first-denomination`\n(define (no-more? items) (null? items))\n(define (except-first-denomination items) (cdr items))\n(define (first-denomination items) (car items))\n\n; Testing\n(cc 100 us-coins) ;Value: 292\n(cc 100 uk-coins) ;Value: 104561 (TAKES TIME TO COMPUTE)\n\n; Test the order\n(cc 100 (list 25 50 10 5 1)) ;Value: 292\n\n; Order of the list does not matter since search is performed for all\n; the combination in our algorithm"}}}},"pageContext":{"name":"2.19.scm","expr":"master:sicp/ch2-abstraction-data/2.19.scm"}}
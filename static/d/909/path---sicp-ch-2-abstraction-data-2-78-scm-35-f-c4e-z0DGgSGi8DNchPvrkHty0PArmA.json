{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"; THe internal procedures in the scheme-number package are essentially nothing more \n; than calls to the primitive procedures +, -, etc. It was not possible to use the \n; primitives of the language directly because our `type-tag` system requires that\n; each data object have a type attached to it. In fact, however, all Lisp\n; implementations do have a type system, which they use internally. Primitive \n; predicates such as `symbol?` and `number?` determine whether data objects have \n; particular types. Modify the definitions of `type-tag`, `contents`, and `attach-tag` \n; from Section 2.4.2 so that our generic system takes advantage of Schemeâ€™s \n; internal type system. That is to say, the system should work as before except that\n; ordinary numbers should be represented simply as Scheme numbers rather than as \n; pairs whose car is the symbol `scheme-number`\n\n(define (attach-tag type-tag contents) \n    (if (eq? type-tag 'scheme-number) \n        contents \n        (cons type-tag contents)))\n\n(define (type-tag datum) \n    (cond ((number? datum) datum) \n          ((pair? datum) (car datum)) \n          (else (error \"Wrong datum TYPE-TAG\" datum)))) \n\n(define (contents datum) \n    (cond ((number? datum) datum) \n          ((pair? datum) (cdr datum)) \n          (else (error \"Wrong datum CONTENGS\" datum)))) \n\n; Testing\n(attach-tag 'cos 0.5) ;Value 2: (cos . .5)\n(attach-tag 'scheme-number 10) ;Value: 10\n\n(type-tag (attach-tag 'cos 0.5)) ;Value: cos\n(type-tag (attach-tag 'scheme-number 10)) ;Value: 10\n\n(contents (attach-tag 'cos 0.5)) ;Value: .5\n(contents (attach-tag 'scheme-number 10)) ;Value: 10"}}}},"pageContext":{"name":"2.78.scm","expr":"master:sicp/ch2-abstraction-data/2.78.scm"}}